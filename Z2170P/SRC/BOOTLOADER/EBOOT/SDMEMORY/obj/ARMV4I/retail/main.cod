; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_kitlEthLan911x| [ DATA ]
	EXPORT	|g_kitlUsbRndis| [ DATA ]
	EXPORT	|g_kitlDevices| [ DATA ]
	EXPORT	|g_bootDevices| [ DATA ]
	EXPORT	|DefaultMacAddress| [ DATA ]
	EXPORT	|dwEbootECCtype| [ DATA ]
	EXPORT	|g_CPUFamily| [ DATA ]
	IMPORT	|RndisMulticastList|
	IMPORT	|RndisCurrentPacketFilter|
	IMPORT	|RndisDisableInts|
	IMPORT	|RndisEnableInts|
	IMPORT	|RndisEDbgGetFrame|
	IMPORT	|RndisEDbgSendFrame|
	IMPORT	|HostMiniInit|
	IMPORT	|LAN911XMulticastList|
	IMPORT	|LAN911XCurrentPacketFilter|
	IMPORT	|LAN911XDisableInts|
	IMPORT	|LAN911XEnableInts|
	IMPORT	|LAN911XGetFrame|
	IMPORT	|LAN911XSendFrame|
	IMPORT	|LAN911XInit|

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_bootCfg|, 0x80

	 COMMON	|g_ecctype|, 0x1

	 COMMON	|g_eboot|, 0x148

	 COMMON	|gDevice_prefix|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_CPUFamily| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| DCB "N"
	DCB	0x0, "K", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "L", 0x0, "E"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "n", 0x0, " ", 0x0, "R"
	DCB	0x0, "N", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_kitlEthLan911x| DCD |LAN911XInit|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XSendFrame|
	DCD	|LAN911XGetFrame|
	DCD	|LAN911XEnableInts|
	DCD	|LAN911XDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XCurrentPacketFilter|
	DCD	|LAN911XMulticastList|
|g_kitlUsbRndis| DCD |HostMiniInit|
	DCD	0x0
	DCD	0x0
	DCD	|RndisEDbgSendFrame|
	DCD	|RndisEDbgGetFrame|
	DCD	|RndisEnableInts|
	DCD	|RndisDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|RndisCurrentPacketFilter|
	DCD	|RndisMulticastList|
|g_kitlDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_bootDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x4809c000
	DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DefaultMacAddress| DCW 0x2020
	DCW	0x3040
	DCW	0x5060

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|dwEbootECCtype| DCD 0xffffffff
	%	4
|?ebootPinMux_37XX@?1??OEMPlatformInit@@9@9| DCW 0x52	; `OEMPlatformInit'::`2'::ebootPinMux_37XX
	%	2
	DCD	0x0
	DCW	0x53
	%	2
	DCD	0x0
	DCW	0x54
	%	2
	DCD	0x0
	DCW	0x55
	%	2
	DCD	0x0
	DCW	0x5c
	%	2
	DCD	0x0
	DCW	0x5d
	%	2
	DCD	0x0
	DCW	0x5e
	%	2
	DCD	0x0
	DCW	0x5f
	%	2
	DCD	0x0
	DCW	0x60
	%	2
	DCD	0x0
	DCW	0x61
	%	2
	DCD	0x0
	DCW	0x62
	%	2
	DCD	0x0
	DCW	0x63
	%	2
	DCD	0x0
	DCW	0x64
	%	2
	DCD	0x0
	DCW	0x65
	%	2
	DCD	0x0
	DCW	0x66
	%	2
	DCD	0x0
	DCW	0x67
	%	2
	DCD	0x0
	DCW	0x68
	%	2
	DCD	0x18
	DCW	0x69
	%	2
	DCD	0x18
	DCW	0x6a
	%	2
	DCD	0x18
	DCW	0x6b
	%	2
	DCD	0x18
	DCW	0x6c
	%	2
	DCD	0x18
	DCW	0x6d
	%	2
	DCD	0x18
	DCW	0x51b
	%	2
	DCD	0x18
	DCW	0x51c
	%	2
	DCD	0x18
	DCW	0x51e
	%	2
	DCD	0x18
	DCW	0x51f
	%	2
	DCD	0x18
	DCW	0x520
	%	2
	DCD	0x18
	DCW	0x521
	%	2
	DCD	0x18
	DCW	0xac
	%	2
	DCD	0x20
	DCW	0xa5
	%	2
	DCD	0x20
	DCW	0x4c
	%	2
	DCD	0x20
	DCW	0x82
	%	2
	DCD	0x21
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0xba
	%	2
	DCD	0x7
	DCW	0xb9
	%	2
	DCD	0x1
	DCW	0xbb
	%	2
	DCD	0x1
	DCW	0xbc
	%	2
	DCD	0x1
	DCW	0xbd
	%	2
	DCD	0x1
	DCW	0xbe
	%	2
	DCD	0x1
	DCW	0xbf
	%	2
	DCD	0x1
	DCW	0xc0
	%	2
	DCD	0x1
	DCW	0xc1
	%	2
	DCD	0x1
	DCW	0xc2
	%	2
	DCD	0x1
	DCW	0xc3
	%	2
	DCD	0x1
	DCW	0xc4
	%	2
	DCD	0x1
	DCW	0xffff
	%	2
	DCD	0x0
	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48019| DCD	|$LN9@ConfigureP|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 577  : {

  00000		 |$LN9@ConfigureP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48016|
  00004	e1a04000	 mov         r4, r0

; 578  :     int i=0;
; 579  :     while (padArray[i].padID != (UINT16) -1)

  00008	e1d420b0	 ldrh        r2, [r4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38350ff	 orr         r5, r3, #0xFF
  00014	e1520005	 cmp         r2, r5
  00018	e3a06000	 mov         r6, #0
  0001c	0a00000b	 beq         |$LN1@ConfigureP|
  00020	e3a01c7f	 mov         r1, #0x7F, 24
  00024	e38170ff	 orr         r7, r1, #0xFF
  00028	e1a03004	 mov         r3, r4
  0002c		 |$LL2@ConfigureP|

; 580  :     {
; 581  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e1a00002	 mov         r0, r2
  00034	e0031007	 and         r1, r3, r7
  00038	eb000000	 bl          SOCSetPadConfig

; 582  :         i++;

  0003c	e2866001	 add         r6, r6, #1
  00040	e0843186	 add         r3, r4, r6, lsl #3
  00044	e1d320b0	 ldrh        r2, [r3]
  00048	e1520005	 cmp         r2, r5
  0004c	1afffff6	 bne         |$LL2@ConfigureP|
  00050		 |$LN1@ConfigureP|

; 583  :     }
; 584  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M48017|

			 ENDP  ; |ConfigurePadArray|

	EXPORT	|BSPGpioInit|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
	IMPORT	|Tps659xx_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T48026| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 94   : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48023|

; 95   :    BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e59f1024	 ldr         r1, [pc, #0x24]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 96   :    BSPInsertGpioDevice(TRITON_GPIO_PINID_START,&Tps659xx_Gpio,NULL);

  00014	e59f1010	 ldr         r1, [pc, #0x10]
  00018	e3a02000	 mov         r2, #0
  0001c	e3a00c01	 mov         r0, #1, 24
  00020	eb000000	 bl          BSPInsertGpioDevice

; 97   : 
; 98   : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BSPGpioIni|
  0002c		 |$LN7@BSPGpioIni|
  0002c	00000000	 DCD         |Tps659xx_Gpio|
  00030		 |$LN8@BSPGpioIni|
  00030	00000000	 DCD         |Omap_Gpio|
  00034		 |$M48024|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|main|
	IMPORT	|BootloaderMain|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|
	IMPORT	|Get_CPUVersion|

  00000			 AREA	 |.pdata|, PDATA
|$T48038| DCD	|$LN5@main|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |main|	 PROC

; 100  : {

  00000		 |$LN5@main|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48035|

; 101  : 	UINT32 CpuRevision;
; 102  : 
; 103  : 	// Get CPU family
; 104  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00004	e59f4034	 ldr         r4, [pc, #0x34]
  00008	e3a03000	 mov         r3, #0
  0000c	e5843000	 str         r3, [r4]

; 105  : 	CpuRevision = Get_CPUVersion();

  00010	eb000000	 bl          Get_CPUVersion

; 106  : 	g_CPUFamily = CPU_FAMILY(CpuRevision);

  00014	e1a03800	 mov         r3, r0, lsl #16
  00018	e1a03c23	 mov         r3, r3, lsr #24
  0001c	e5843000	 str         r3, [r4]

; 107  : 
; 108  :     EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,TRUE);

  00020	eb000000	 bl          BSPGetDebugUARTConfig
  00024	e5900000	 ldr         r0, [r0]
  00028	e3a01001	 mov         r1, #1
  0002c	eb000000	 bl          EnableDeviceClocks

; 109  :     BootloaderMain();

  00030	eb000000	 bl          BootloaderMain

; 110  : }

  00034	e3a00000	 mov         r0, #0
  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN6@main|
  00040		 |$LN7@main|
  00040	00000000	 DCD         |g_CPUFamily|
  00044		 |$M48036|

			 ENDP  ; |main|

	EXPORT	|OEMPlatformInit|
	EXPORT	|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08EMFGLKEE@EVM3730?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08EMKGMLIM@15?334?351?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0M@CIHKNPCF@Aug?5?59?52013?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@IGLADHOM@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| [ DATA ] ; `string'
	IMPORT	|TWLReadIDCode|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|
	IMPORT	|TWLOpen|
	IMPORT	|GPIOInit|
	IMPORT	|OALI2CInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALLocalAllocInit|

  00004			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48096| DCD	|$LN49@OEMPlatfor|
	DCD	0x4000cf02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "3", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08EMFGLKEE@EVM3730?9?$AA@| DCB "EVM3730-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "I", 0x0, " ", 0x0, "O", 0x0, "M"
	DCB	0x0, "A", 0x0, "P", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "V"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "2", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "1", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "0", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08EMKGMLIM@15?334?351?$AA@| DCB "15:34:51", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0M@CIHKNPCF@Aug?5?59?52013?$AA@| DCB "Aug  9 2013", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@IGLADHOM@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| DCB "Z"
	DCB	0x0, "E", 0x0, "B", 0x0, "E", 0x0, "X", 0x0, " ", 0x0, "W"
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "Z", 0x0, "-", 0x0, "2", 0x0, "1"
	DCB	0x0, "7", 0x0, "0", 0x0, " ", 0x0, "p", 0x0, "l", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "R", 0x0, "a"
	DCB	0x0, "y", 0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, "B"
	DCB	0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformInit| PROC

; 123  : {

  00000		 |$LN49@OEMPlatfor|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48093|

; 124  :     OMAP_GPTIMER_REGS *pTimerRegs;
; 125  :     UINT32 CpuRevision, version;
; 126  :     HANDLE hTwl,hGPIO;
; 127  :     static UCHAR allocationPool[512];
; 128  :     /*static const PAD_INFO ebootPinMux[] = {
; 129  :             DSS_PADS
; 130  :             GPIO_PADS
; 131  : 			USBOTG_PADS
; 132  :             END_OF_PAD_ARRAY
; 133  :     };*/
; 134  :     static const PAD_INFO ebootPinMux_37XX[] = {
; 135  :             DSS_PADS_37XX
; 136  :             GPIO_PADS_37XX
; 137  : 	     	USBOTG_PADS
; 138  :             END_OF_PAD_ARRAY
; 139  :     };
; 140  :     
; 141  :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  00008	e59f631c	 ldr         r6, [pc, #0x31C]
  0000c	e3a01c02	 mov         r1, #2, 24
  00010	e1a00006	 mov         r0, r6
  00014	eb000000	 bl          OALLocalAllocInit

; 142  : 
; 143  :     // Get processor and companion chip versions
; 144  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00018	e3a03000	 mov         r3, #0
  0001c	e5863200	 str         r3, [r6, #0x200]

; 145  :     CpuRevision = Get_CPUVersion();

  00020	eb000000	 bl          Get_CPUVersion
  00024	e1a08000	 mov         r8, r0

; 146  :     version = CPU_REVISION(CpuRevision);
; 147  :     g_CPUFamily = CPU_FAMILY(CpuRevision);

  00028	e1a03808	 mov         r3, r8, lsl #16
  0002c	e3a02312	 mov         r2, #0x12, 6
  00030	e1a03c23	 mov         r3, r3, lsr #24

; 148  : 
; 149  : 	// Set GPTIMER1 regs pointer
; 150  : 	pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00034	e3a01000	 mov         r1, #0
  00038	e38209c6	 orr         r0, r2, #0xC6, 18
  0003c	e5863200	 str         r3, [r6, #0x200]
  00040	e20850ff	 and         r5, r8, #0xFF
  00044	eb000000	 bl          OALPAtoVA

; 151  : 
; 152  :     //if(g_CPUFamily == CPU_FAMILY_DM37XX)
; 153  :     //{
; 154  : 	ConfigurePadArray(ebootPinMux_37XX);

  00048	e59f92d8	 ldr         r9, [pc, #0x2D8]
  0004c	e3a01c7f	 mov         r1, #0x7F, 24
  00050	e381a0ff	 orr         r10, r1, #0xFF
  00054	e2891008	 add         r1, r9, #8
  00058	e58d1000	 str         r1, [sp]
  0005c	e1a07000	 mov         r7, r0
  00060	e2891008	 add         r1, r9, #8
  00064	e59d9000	 ldr         r9, [sp]
  00068	e3a00cff	 mov         r0, #0xFF, 24
  0006c	e58d1004	 str         r1, [sp, #4]
  00070	e1a06001	 mov         r6, r1
  00074	e3a04000	 mov         r4, #0
  00078	e3a03000	 mov         r3, #0
  0007c	e3a02052	 mov         r2, #0x52
  00080	e380b0ff	 orr         r11, r0, #0xFF
  00084		 |$LL38@OEMPlatfor|
  00084	e0833009	 add         r3, r3, r9
  00088	e5933004	 ldr         r3, [r3, #4]
  0008c	e1a00002	 mov         r0, r2
  00090	e003100a	 and         r1, r3, r10
  00094	eb000000	 bl          SOCSetPadConfig
  00098	e2844001	 add         r4, r4, #1
  0009c	e1a03184	 mov         r3, r4, lsl #3
  000a0	e19320b6	 ldrh        r2, [r3, +r6]
  000a4	e152000b	 cmp         r2, r11
  000a8	1afffff5	 bne         |$LL38@OEMPlatfor|

; 155  :     //}
; 156  :     //else
; 157  :     //{
; 158  :     //    ConfigurePadArray(ebootPinMux);
; 159  :     //}
; 160  : 
; 161  :     OALLog(L"ZEBEX Windows CE EBOOT for Z-2170 plus - Ray Testing"		//Ray 13-07-31 
; 162  : 	//OALLog(L"ZEBEX Windows CE EBOOT for Z-2170 plus - Brain"		
; 163  :         L"\r\nBuilt %S at %S\r\n", __DATE__, __TIME__ );

  000ac	e59f2284	 ldr         r2, [pc, #0x284]
  000b0	e59f127c	 ldr         r1, [pc, #0x27C]
  000b4	e59f0274	 ldr         r0, [pc, #0x274]
  000b8	eb000000	 bl          NKDbgPrintfW

; 164  :     /*OALLog(
; 165  :         L"EBOOT Version %d.%d, BSP " BSP_VERSION_STRING L"\r\n", 
; 166  :         EBOOT_VERSION_MAJOR, EBOOT_VERSION_MINOR        
; 167  :         );*/
; 168  : 
; 169  :     // Soft reset GPTIMER1
; 170  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  000bc	e3a03002	 mov         r3, #2
  000c0	e59f6264	 ldr         r6, [pc, #0x264]
  000c4	e59f925c	 ldr         r9, [pc, #0x25C]
  000c8	e5873010	 str         r3, [r7, #0x10]
  000cc		 |$LL6@OEMPlatfor|

; 171  :     // While until done
; 172  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0)

  000cc	e5973014	 ldr         r3, [r7, #0x14]
  000d0	e3130001	 tst         r3, #1
  000d4	0afffffc	 beq         |$LL6@OEMPlatfor|

; 173  :     	;
; 174  :  
; 175  :     // Enable posted mode
; 176  :     OUTREG32(&pTimerRegs->TSICR, GPTIMER_TSICR_POSTED);

  000d8	e3a03004	 mov         r3, #4
  000dc	e5873040	 str         r3, [r7, #0x40]

; 177  :     // Start timer
; 178  :     OUTREG32(&pTimerRegs->TCLR, GPTIMER_TCLR_AR|GPTIMER_TCLR_ST);

  000e0	e3a03003	 mov         r3, #3

; 179  :     
; 180  : 	// Enable device clocks used by the bootloader
; 181  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,TRUE);

  000e4	e3a01001	 mov         r1, #1
  000e8	e3a00029	 mov         r0, #0x29
  000ec	e5873024	 str         r3, [r7, #0x24]
  000f0	eb000000	 bl          EnableDeviceClocks

; 182  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,TRUE);

  000f4	e3a01001	 mov         r1, #1
  000f8	e3a0002d	 mov         r0, #0x2D
  000fc	eb000000	 bl          EnableDeviceClocks

; 183  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,TRUE);

  00100	e3a01001	 mov         r1, #1
  00104	e3a0002e	 mov         r0, #0x2E
  00108	eb000000	 bl          EnableDeviceClocks

; 184  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,TRUE);

  0010c	e3a01001	 mov         r1, #1
  00110	e3a0002f	 mov         r0, #0x2F
  00114	eb000000	 bl          EnableDeviceClocks

; 185  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,TRUE);

  00118	e3a01001	 mov         r1, #1
  0011c	e3a00030	 mov         r0, #0x30
  00120	eb000000	 bl          EnableDeviceClocks

; 186  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,TRUE);

  00124	e3a01001	 mov         r1, #1
  00128	e3a00031	 mov         r0, #0x31
  0012c	eb000000	 bl          EnableDeviceClocks

; 187  : 
; 188  :     // configure i2c devices
; 189  :     OALI2CInit(OMAP_DEVICE_I2C1);

  00130	e3a0000c	 mov         r0, #0xC
  00134	eb000000	 bl          OALI2CInit

; 190  :     OALI2CInit(OMAP_DEVICE_I2C2);

  00138	e3a0000d	 mov         r0, #0xD
  0013c	eb000000	 bl          OALI2CInit

; 191  :     OALI2CInit(OMAP_DEVICE_I2C3);

  00140	e3a0000e	 mov         r0, #0xE
  00144	eb000000	 bl          OALI2CInit

; 192  : 
; 193  :     GPIOInit();

  00148	eb000000	 bl          GPIOInit

; 194  :     // Note that T2 accesses must occur after I2C initialization
; 195  :     hTwl = TWLOpen();

  0014c	eb000000	 bl          TWLOpen
  00150	e1a07000	 mov         r7, r0

; 196  :     hGPIO = GPIOOpen(); 

  00154	eb000000	 bl          GPIOOpen

; 197  :     
; 198  :     
; 199  :     // Clear Reset on ethernet controller        
; 200  :     //GPIOSetBit(hGPIO,LAN9115_RESET_GPIO);            
; 201  :     //GPIOSetMode(hGPIO, LAN9115_RESET_GPIO,GPIO_DIR_OUTPUT);
; 202  : 	// test GPIO 
; 203  : 	GPIOClrBit(hGPIO,136); // VIBRATOR

  00158	e3a01088	 mov         r1, #0x88
  0015c	e1a04000	 mov         r4, r0
  00160	eb000000	 bl          GPIOClrBit

; 204  : 	GPIOSetMode(hGPIO, 136,GPIO_DIR_OUTPUT);

  00164	e3a02000	 mov         r2, #0
  00168	e3a01088	 mov         r1, #0x88
  0016c	e1a00004	 mov         r0, r4
  00170	eb000000	 bl          GPIOSetMode

; 205  :     GPIOClrBit(hGPIO,16); // WLAN_EN

  00174	e3a01010	 mov         r1, #0x10
  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          GPIOClrBit

; 206  : 	GPIOSetMode(hGPIO, 16,GPIO_DIR_OUTPUT);

  00180	e3a02000	 mov         r2, #0
  00184	e3a01010	 mov         r1, #0x10
  00188	e1a00004	 mov         r0, r4
  0018c	eb000000	 bl          GPIOSetMode

; 207  : 	GPIOClrBit(hGPIO,15); // BT_EN

  00190	e3a0100f	 mov         r1, #0xF
  00194	e1a00004	 mov         r0, r4
  00198	eb000000	 bl          GPIOClrBit

; 208  : 	GPIOSetMode(hGPIO, 15,GPIO_DIR_OUTPUT);

  0019c	e3a02000	 mov         r2, #0
  001a0	e3a0100f	 mov         r1, #0xF
  001a4	e1a00004	 mov         r0, r4
  001a8	eb000000	 bl          GPIOSetMode

; 209  : 	GPIOSetBit(hGPIO,61); // BACKLIGHT_EN

  001ac	e3a0103d	 mov         r1, #0x3D
  001b0	e1a00004	 mov         r0, r4
  001b4	eb000000	 bl          GPIOSetBit

; 210  : 	GPIOSetMode(hGPIO, 61,GPIO_DIR_OUTPUT);

  001b8	e3a02000	 mov         r2, #0
  001bc	e3a0103d	 mov         r1, #0x3D
  001c0	e1a00004	 mov         r0, r4
  001c4	eb000000	 bl          GPIOSetMode

; 211  : 	//SPI LCM setup
; 212  : 
; 213  : 	/*XX
; 214  : 	GPIOSetBit(hGPIO,184); // PCM_EN serial clock 
; 215  : 	GPIOSetMode(hGPIO, 184, GPIO_PULLUP_ENABLE);
; 216  : 	//GPIOSetMode(hGPIO, 184, GPIO_DIR_OUTPUT);
; 217  : 
; 218  : 	GPIOSetBit(hGPIO,185); // PCM_EN serial data
; 219  : 	GPIOSetMode(hGPIO, 185, GPIO_PULLUP_ENABLE);
; 220  : 	//GPIOSetMode(hGPIO, 185, GPIO_DIR_OUTPUT);*/
; 221  : 
; 222  : 
; 223  :      OALLog(L"\r\nTI OMAP%x Version 0x%08x (%s)\r\n", CPU_ID(CpuRevision), CPU_REVISION(CpuRevision),        
; 224  :         version == CPU_FAMILY_35XX_REVISION_ES_1_0 ? L"ES1.0" :
; 225  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0 ? L"ES2.0" :
; 226  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1 ? L"ES2.1" :
; 227  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0_CRC ? L"ES2.0, ID determined using CRC" :
; 228  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1_CRC ? L"ES2.1, ID determined using CRC" :
; 229  :         version == CPU_FAMILY_35XX_REVISION_ES_3_0 ? L"ES3.0" :
; 230  :         version == CPU_FAMILY_35XX_REVISION_ES_3_1 ? L"ES3.1" : 
; 231  :         version == CPU_FAMILY_37XX_REVISION_ES_1_0? L"ES1.0" :
; 232  :         version == CPU_FAMILY_37XX_REVISION_ES_1_1? L"ES1.1" :
; 233  :         version == CPU_FAMILY_37XX_REVISION_ES_1_2? L"ES1.2" :
; 234  :         L"Unknown" );  

  001c8	e59f4154	 ldr         r4, [pc, #0x154]
  001cc	e3550000	 cmp         r5, #0
  001d0	0a000013	 beq         |$LN44@OEMPlatfor|
  001d4	e3550001	 cmp         r5, #1
  001d8	059f3140	 ldreq       r3, [pc, #0x140]
  001dc	0a000018	 beq         |$LN10@OEMPlatfor|
  001e0	e3550002	 cmp         r5, #2
  001e4	059f3130	 ldreq       r3, [pc, #0x130]
  001e8	0a000015	 beq         |$LN10@OEMPlatfor|
  001ec	e3550003	 cmp         r5, #3
  001f0	059f3120	 ldreq       r3, [pc, #0x120]
  001f4	0a000012	 beq         |$LN10@OEMPlatfor|
  001f8	e3550004	 cmp         r5, #4
  001fc	059f3110	 ldreq       r3, [pc, #0x110]
  00200	0a00000f	 beq         |$LN10@OEMPlatfor|
  00204	e3550005	 cmp         r5, #5
  00208	059f3100	 ldreq       r3, [pc, #0x100]
  0020c	0a00000c	 beq         |$LN10@OEMPlatfor|
  00210	e3550006	 cmp         r5, #6
  00214	059f30f0	 ldreq       r3, [pc, #0xF0]
  00218	0a000009	 beq         |$LN10@OEMPlatfor|
  0021c	e3550010	 cmp         r5, #0x10
  00220	1a000001	 bne         |$LN13@OEMPlatfor|
  00224		 |$LN44@OEMPlatfor|
  00224	e1a03004	 mov         r3, r4
  00228	ea000005	 b           |$LN10@OEMPlatfor|
  0022c		 |$LN13@OEMPlatfor|
  0022c	e3550011	 cmp         r5, #0x11
  00230	059f30bc	 ldreq       r3, [pc, #0xBC]
  00234	0a000002	 beq         |$LN10@OEMPlatfor|
  00238	e3550012	 cmp         r5, #0x12
  0023c	059f30ac	 ldreq       r3, [pc, #0xAC]
  00240	159f30a0	 ldrne       r3, [pc, #0xA0]
  00244		 |$LN10@OEMPlatfor|
  00244	e59f00bc	 ldr         r0, [pc, #0xBC]
  00248	e1a02005	 mov         r2, r5
  0024c	e1a01828	 mov         r1, r8, lsr #16
  00250	eb000000	 bl          NKDbgPrintfW

; 235  :     /* Initialize Device Prefix */
; 236  :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00254	e5963200	 ldr         r3, [r6, #0x200]
  00258	e3530001	 cmp         r3, #1

; 237  :     {
; 238  :         gDevice_prefix = BSP_DEVICE_37xx_PREFIX;

  0025c	059f20a0	 ldreq       r2, [pc, #0xA0]
  00260	0a000005	 beq         |$LN45@OEMPlatfor|

; 239  :     }
; 240  :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  00264	e5963200	 ldr         r3, [r6, #0x200]
  00268	e3530000	 cmp         r3, #0

; 241  :     {
; 242  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;
; 243  :     }
; 244  :     else
; 245  :     {
; 246  :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  0026c	15961200	 ldrne       r1, [r6, #0x200]
  00270	159f0088	 ldrne       r0, [pc, #0x88]
  00274	1b000000	 blne        NKDbgPrintfW

; 247  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;

  00278	e59f207c	 ldr         r2, [pc, #0x7C]
  0027c		 |$LN45@OEMPlatfor|
  0027c	e59f3074	 ldr         r3, [pc, #0x74]

; 248  :     }
; 249  : 
; 250  :     version = TWLReadIDCode(hTwl);

  00280	e1a00007	 mov         r0, r7
  00284	e5832000	 str         r2, [r3]
  00288	eb000000	 bl          TWLReadIDCode
  0028c	e1b01000	 movs        r1, r0

; 251  : 
; 252  :     OALLog(L"TPS659XX Version 0x%02x (%s)\r\n", version,
; 253  :         version == 0x00 ? L"ES1.0" : 
; 254  :         version == 0x10 ? L"ES1.1" : 
; 255  :         version == 0x20 ? L"ES1.2" : 
; 256  :         version == 0x30 ? L"ES1.3" : L"Unknown" );

  00290	0a000008	 beq         |$LN30@OEMPlatfor|
  00294	e3510010	 cmp         r1, #0x10
  00298	059f4054	 ldreq       r4, [pc, #0x54]
  0029c	0a000005	 beq         |$LN30@OEMPlatfor|
  002a0	e3510020	 cmp         r1, #0x20
  002a4	059f4044	 ldreq       r4, [pc, #0x44]
  002a8	0a000002	 beq         |$LN30@OEMPlatfor|
  002ac	e3510030	 cmp         r1, #0x30
  002b0	059f4034	 ldreq       r4, [pc, #0x34]
  002b4	159f402c	 ldrne       r4, [pc, #0x2C]
  002b8		 |$LN30@OEMPlatfor|
  002b8	e59f0024	 ldr         r0, [pc, #0x24]
  002bc	e1a02004	 mov         r2, r4
  002c0	eb000000	 bl          NKDbgPrintfW

; 257  : 		
; 258  :     g_ecctype = (UCHAR)dwEbootECCtype;

  002c4	e5992000	 ldr         r2, [r9]
  002c8	e59f3010	 ldr         r3, [pc, #0x10]

; 259  : 
; 260  :     // Done
; 261  :     return TRUE;

  002cc	e3a00001	 mov         r0, #1
  002d0	e5c32000	 strb        r2, [r3]

; 262  : }

  002d4	e28dd008	 add         sp, sp, #8
  002d8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002dc	e12fff1e	 bx          lr
  002e0		 |$LN50@OEMPlatfor|
  002e0		 |$LN51@OEMPlatfor|
  002e0	00000000	 DCD         |g_ecctype|
  002e4		 |$LN52@OEMPlatfor|
  002e4	00000000	 DCD         |??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002e8		 |$LN53@OEMPlatfor|
  002e8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  002ec		 |$LN54@OEMPlatfor|
  002ec	00000000	 DCD         |??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@|
  002f0		 |$LN55@OEMPlatfor|
  002f0	00000000	 DCD         |??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@|
  002f4		 |$LN56@OEMPlatfor|
  002f4	00000000	 DCD         |??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@|
  002f8		 |$LN57@OEMPlatfor|
  002f8	00000000	 DCD         |gDevice_prefix|
  002fc		 |$LN58@OEMPlatfor|
  002fc	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  00300		 |$LN59@OEMPlatfor|
  00300	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  00304		 |$LN60@OEMPlatfor|
  00304	00000000	 DCD         |??_C@_08EMFGLKEE@EVM3730?9?$AA@|
  00308		 |$LN61@OEMPlatfor|
  00308	00000000	 DCD         |??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@|
  0030c		 |$LN62@OEMPlatfor|
  0030c	00000000	 DCD         |??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@|
  00310		 |$LN63@OEMPlatfor|
  00310	00000000	 DCD         |??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@|
  00314		 |$LN64@OEMPlatfor|
  00314	00000000	 DCD         |??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00318		 |$LN65@OEMPlatfor|
  00318	00000000	 DCD         |??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  0031c		 |$LN66@OEMPlatfor|
  0031c	00000000	 DCD         |??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@|
  00320		 |$LN67@OEMPlatfor|
  00320	00000000	 DCD         |??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@|
  00324		 |$LN68@OEMPlatfor|
  00324	00000000	 DCD         |??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@|
  00328		 |$LN69@OEMPlatfor|
  00328	00000000	 DCD         |dwEbootECCtype|
  0032c		 |$LN70@OEMPlatfor|
  0032c	00000000	 DCD         |?allocationPool@?1??OEMPlatformInit@@9@9|
  00330		 |$LN71@OEMPlatfor|
  00330	00000000	 DCD         |??_C@_1IO@IGLADHOM@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@|
  00334		 |$LN72@OEMPlatfor|
  00334	00000000	 DCD         |??_C@_0M@CIHKNPCF@Aug?5?59?52013?$AA@|
  00338		 |$LN73@OEMPlatfor|
  00338	00000000	 DCD         |??_C@_08EMKGMLIM@15?334?351?$AA@|
  0033c		 |$M48094|

			 ENDP  ; |OEMPlatformInit|


  00000			 AREA	 |.pdata|, PDATA
|$T48129| DCD	|$LN8@OEMPlatfor@2|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformDeinit| PROC

; 269  : {

  00000		 |$LN8@OEMPlatfor@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48126|
  00004	e3a03312	 mov         r3, #0x12, 6

; 270  :     OMAP_GPTIMER_REGS *pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 271  : 
; 272  :     // Soft reset GPTIMER
; 273  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  00014	e3a03002	 mov         r3, #2
  00018	e5803010	 str         r3, [r0, #0x10]
  0001c		 |$LL2@OEMPlatfor@2|

; 274  :     // While until done
; 275  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  0001c	e5903014	 ldr         r3, [r0, #0x14]
  00020	e3130001	 tst         r3, #1
  00024	0afffffc	 beq         |$LL2@OEMPlatfor@2|

; 276  : 
; 277  : 	// Disable device clocks that were used by the bootloader
; 278  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,FALSE);

  00028	e3a01000	 mov         r1, #0
  0002c	e3a00029	 mov         r0, #0x29
  00030	eb000000	 bl          EnableDeviceClocks

; 279  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,FALSE);

  00034	e3a01000	 mov         r1, #0
  00038	e3a0002d	 mov         r0, #0x2D
  0003c	eb000000	 bl          EnableDeviceClocks

; 280  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,FALSE);

  00040	e3a01000	 mov         r1, #0
  00044	e3a0002e	 mov         r0, #0x2E
  00048	eb000000	 bl          EnableDeviceClocks

; 281  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,FALSE);

  0004c	e3a01000	 mov         r1, #0
  00050	e3a0002f	 mov         r0, #0x2F
  00054	eb000000	 bl          EnableDeviceClocks

; 282  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,FALSE);

  00058	e3a01000	 mov         r1, #0
  0005c	e3a00030	 mov         r0, #0x30
  00060	eb000000	 bl          EnableDeviceClocks

; 283  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,FALSE);

  00064	e3a01000	 mov         r1, #0
  00068	e3a00031	 mov         r0, #0x31
  0006c	eb000000	 bl          EnableDeviceClocks

; 284  :     EnableDeviceClocks(OMAP_DEVICE_GPTIMER2,FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e3a00035	 mov         r0, #0x35
  00078	eb000000	 bl          EnableDeviceClocks

; 285  :     EnableDeviceClocks(OMAP_DEVICE_UART1,FALSE);

  0007c	e3a01000	 mov         r1, #0
  00080	e3a0000a	 mov         r0, #0xA
  00084	eb000000	 bl          EnableDeviceClocks

; 286  : 	EnableDeviceClocks(OMAP_DEVICE_UART2,FALSE);

  00088	e3a01000	 mov         r1, #0
  0008c	e3a0000b	 mov         r0, #0xB
  00090	eb000000	 bl          EnableDeviceClocks

; 287  :     EnableDeviceClocks(OMAP_DEVICE_UART3,FALSE);

  00094	e3a01000	 mov         r1, #0
  00098	e3a0003d	 mov         r0, #0x3D
  0009c	eb000000	 bl          EnableDeviceClocks

; 288  :     EnableDeviceClocks(OMAP_DEVICE_MMC1,FALSE);

  000a0	e3a01000	 mov         r1, #0
  000a4	e3a00015	 mov         r0, #0x15
  000a8	eb000000	 bl          EnableDeviceClocks

; 289  :     EnableDeviceClocks(OMAP_DEVICE_MMC2,FALSE);

  000ac	e3a01000	 mov         r1, #0
  000b0	e3a00016	 mov         r0, #0x16
  000b4	eb000000	 bl          EnableDeviceClocks

; 290  :     EnableDeviceClocks(OMAP_DEVICE_I2C1,FALSE);

  000b8	e3a01000	 mov         r1, #0
  000bc	e3a0000c	 mov         r0, #0xC
  000c0	eb000000	 bl          EnableDeviceClocks

; 291  :     EnableDeviceClocks(OMAP_DEVICE_I2C2,FALSE);

  000c4	e3a01000	 mov         r1, #0
  000c8	e3a0000d	 mov         r0, #0xD
  000cc	eb000000	 bl          EnableDeviceClocks

; 292  :     EnableDeviceClocks(OMAP_DEVICE_I2C3,FALSE);

  000d0	e3a01000	 mov         r1, #0
  000d4	e3a0000e	 mov         r0, #0xE
  000d8	eb000000	 bl          EnableDeviceClocks

; 293  : }

  000dc	e49de004	 ldr         lr, [sp], #4
  000e0	e12fff1e	 bx          lr
  000e4		 |$M48127|

			 ENDP  ; |OEMPlatformDeinit|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMMultiBinNotify|
	EXPORT	|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08CMMENMPK@logo?4nb0?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|
	IMPORT	|OALVAtoPA|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|strncmp|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48185| DCD	|$LN62@OEMMultiBi|
	DCD	0xc000a302

  00000			 AREA	 |.xdata|, DATA
|$T48181| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "B", 0x0, "i", 0x0, "n", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08CMMENMPK@logo?4nb0?$AA@| DCB "logo.nb0", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "X"
	DCB	0x0, "I", 0x0, "P", 0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| DCB "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, " "
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48181|

  00008		 |OEMMultiBinNotify| PROC

; 769  : {

  00008		 |$LN62@OEMMultiBi|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf43	 sub         sp, sp, #0x43, 30
  00010		 |$M48182|
  00010	e1a06000	 mov         r6, r0
  00014	e59f3274	 ldr         r3, [pc, #0x274]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3108	 str         r3, [sp, #0x108]
  00020	e3a03102	 mov         r3, #2, 2

; 770  :     BOOL rc = FALSE;
; 771  :     UINT32 base = OALVAtoPA((UCHAR*)IMAGE_WINCE_CODE_CA);

  00024	e3830a02	 orr         r0, r3, #2, 20
  00028	eb000000	 bl          OALVAtoPA

; 772  :     UINT32 start, length;
; 773  :     UINT32 ix;
; 774  : 
; 775  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 776  :     OALMSG(OAL_INFO, (L"Download file information:\r\n"));

  0002c	e59f5258	 ldr         r5, [pc, #0x258]
  00030	e1a0a000	 mov         r10, r0
  00034	e5953440	 ldr         r3, [r5, #0x440]
  00038	e3130008	 tst         r3, #8
  0003c	159f0244	 ldrne       r0, [pc, #0x244]
  00040	1b000000	 blne        NKDbgPrintfW
  00044	e5953440	 ldr         r3, [r5, #0x440]

; 777  :     OALMSG(OAL_INFO, (L"-----------------------------------------------------------\r\n"));

  00048	e3130008	 tst         r3, #8
  0004c	159f0228	 ldrne       r0, [pc, #0x228]
  00050	1b000000	 blne        NKDbgPrintfW

; 778  : 
; 779  :     // Copy information to EBOOT structure and set also save address
; 780  :     g_eboot.numRegions = pInfo->dwNumRegions;

  00054	e59f4228	 ldr         r4, [pc, #0x228]
  00058	e5963000	 ldr         r3, [r6]

; 781  :     for (ix = 0; ix < pInfo->dwNumRegions; ix++)

  0005c	e3a08000	 mov         r8, #0
  00060	e5843008	 str         r3, [r4, #8]
  00064	e5963000	 ldr         r3, [r6]
  00068	e3530000	 cmp         r3, #0
  0006c	9a000015	 bls         |$LN22@OEMMultiBi|
  00070	e1a07004	 mov         r7, r4
  00074	e1a09006	 mov         r9, r6
  00078		 |$LL24@OEMMultiBi|

; 782  : 	{
; 783  :         g_eboot.region[ix].start = pInfo->Region[ix].dwRegionStart;

  00078	e5993004	 ldr         r3, [r9, #4]
  0007c	e5952440	 ldr         r2, [r5, #0x440]
  00080	e5873010	 str         r3, [r7, #0x10]

; 784  :         g_eboot.region[ix].length = pInfo->Region[ix].dwRegionLength;

  00084	e5993008	 ldr         r3, [r9, #8]

; 785  :         g_eboot.region[ix].base = base;
; 786  :         base += g_eboot.region[ix].length;
; 787  :         OALMSG(OAL_INFO, (L"[%d]: Address=0x%08x  Length=0x%08x  Save=0x%08x\r\n",
; 788  :             ix, g_eboot.region[ix].start, g_eboot.region[ix].length,g_eboot.region[ix].base));

  00088	e3120008	 tst         r2, #8
  0008c	e587a018	 str         r10, [r7, #0x18]
  00090	15971018	 ldrne       r1, [r7, #0x18]
  00094	15972010	 ldrne       r2, [r7, #0x10]
  00098	159f01e0	 ldrne       r0, [pc, #0x1E0]
  0009c	158d1000	 strne       r1, [sp]
  000a0	11a01008	 movne       r1, r8
  000a4	e5873014	 str         r3, [r7, #0x14]
  000a8	e08aa003	 add         r10, r10, r3
  000ac	1b000000	 blne        NKDbgPrintfW
  000b0	e5963000	 ldr         r3, [r6]
  000b4	e2888001	 add         r8, r8, #1
  000b8	e2899f43	 add         r9, r9, #0x43, 30
  000bc	e1580003	 cmp         r8, r3
  000c0	e287700c	 add         r7, r7, #0xC
  000c4	3affffeb	 bcc         |$LL24@OEMMultiBi|
  000c8		 |$LN22@OEMMultiBi|

; 772  :     UINT32 start, length;
; 773  :     UINT32 ix;
; 774  : 
; 775  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 776  :     OALMSG(OAL_INFO, (L"Download file information:\r\n"));

  000c8	e5953440	 ldr         r3, [r5, #0x440]

; 789  : 	}
; 790  :     OALMSG(OAL_INFO, (L"-----------------------------------------------------------\r\n"));

  000cc	e3130008	 tst         r3, #8
  000d0	159f01a4	 ldrne       r0, [pc, #0x1A4]
  000d4	1b000000	 blne        NKDbgPrintfW
  000d8	e5943008	 ldr         r3, [r4, #8]

; 791  : 
; 792  : #ifndef IMGMULTIXIP
; 793  : 
; 794  :     //Determine type of image downloaded
; 795  :     if (g_eboot.numRegions > 1) 

  000dc	e3530001	 cmp         r3, #1
  000e0	9a000004	 bls         |$LN21@OEMMultiBi|
  000e4	e5953440	 ldr         r3, [r5, #0x440]

; 796  :     {
; 797  :         OALMSG(OAL_ERROR, (L"ERROR: MultiXIP image is not supported\r\n"));

  000e8	e3130001	 tst         r3, #1
  000ec	0a000047	 beq         |$LN51@OEMMultiBi|
  000f0	e59f0180	 ldr         r0, [pc, #0x180]

; 798  :         goto cleanUp;

  000f4	ea000044	 b           |$LN57@OEMMultiBi|
  000f8		 |$LN21@OEMMultiBi|

; 799  :     }
; 800  : #endif
; 801  : 
; 802  :     base = g_eboot.region[0].base;
; 803  :     start = g_eboot.region[0].start;

  000f8	e5941010	 ldr         r1, [r4, #0x10]
  000fc	e3a03101	 mov         r3, #1, 2

; 804  :     length = g_eboot.region[0].length; 
; 805  :     
; 806  :     if (start == IMAGE_XLDR_CODE_PA)

  00100	e3833602	 orr         r3, r3, #2, 12
  00104	e1510003	 cmp         r1, r3
  00108	e5940018	 ldr         r0, [r4, #0x18]
  0010c	e5947014	 ldr         r7, [r4, #0x14]

; 807  :         {
; 808  :         g_eboot.type = DOWNLOAD_TYPE_XLDR;

  00110	03a03003	 moveq       r3, #3
  00114	0a00000e	 beq         |$LN59@OEMMultiBi|

; 809  :         memset(OALPAtoCA(base), 0xFF, length);

  00118	e3a03487	 mov         r3, #0x87, 8

; 810  :         } 
; 811  :     else if (start == IMAGE_EBOOT_CODE_CA)

  0011c	e383360e	 orr         r3, r3, #0xE, 12
  00120	e1510003	 cmp         r1, r3

; 812  :         {
; 813  :         g_eboot.type = DOWNLOAD_TYPE_EBOOT;

  00124	03a03004	 moveq       r3, #4
  00128	0a000009	 beq         |$LN59@OEMMultiBi|

; 814  :         memset(OALPAtoCA(base), 0xFF, length);

  0012c	e3a03103	 mov         r3, #3, 2

; 815  :         }
; 816  :     else if (start == (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET))

  00130	e3833a02	 orr         r3, r3, #2, 20
  00134	e1510003	 cmp         r1, r3

; 817  :         {
; 818  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNAND;

  00138	03a03006	 moveq       r3, #6
  0013c	0a000004	 beq         |$LN59@OEMMultiBi|

; 819  :         memset(OALPAtoCA(base), 0xFF, length);

  00140	e3a0320e	 mov         r3, #0xE, 4

; 820  :         } 
; 821  : #ifdef IMGMULTIXIP
; 822  :     else if (start == (IMAGE_WINCE_EXT_CA))
; 823  :         {
; 824  :         g_eboot.type = DOWNLOAD_TYPE_EXT;
; 825  :         memset(OALPAtoCA(base), 0xFF, length);
; 826  :         } 
; 827  : #endif	
; 828  :     else if (start == (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))

  00144	e3833a02	 orr         r3, r3, #2, 20
  00148	e1510003	 cmp         r1, r3
  0014c	1a000007	 bne         |$LN14@OEMMultiBi|

; 829  :         {
; 830  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNOR;

  00150	e3a03007	 mov         r3, #7
  00154		 |$LN59@OEMMultiBi|

; 831  :         memset(OALPAtoCA(base), 0xFF, length);

  00154	e3a01001	 mov         r1, #1
  00158	e5843004	 str         r3, [r4, #4]
  0015c	eb000000	 bl          OALPAtoVA
  00160	e1a02007	 mov         r2, r7
  00164	e3a010ff	 mov         r1, #0xFF
  00168	eb000000	 bl          memset
  0016c	ea00002e	 b           |$LN4@OEMMultiBi|
  00170		 |$LN14@OEMMultiBi|

; 832  :         } 
; 833  : 	else if (start == 0) // Probably a NB0 file, let's fint out

  00170	e3510000	 cmp         r1, #0
  00174	1a00002a	 bne         |$LN12@OEMMultiBi|

; 834  : 		{
; 835  : 		// Convert the file name to lower case
; 836  : 		CHAR szFileName[MAX_PATH];
; 837  : 		int i = 0;
; 838  : 		int fileExtPos = 0;
; 839  : 
; 840  : 		while ((pInfo->Region[0].szFileName[i] != '\0') && (i < MAX_PATH))

  00178	e1d630dc	 ldrsb       r3, [r6, #0xC]
  0017c	e3a00000	 mov         r0, #0
  00180	e3530000	 cmp         r3, #0
  00184	0a00000f	 beq         |$LN56@OEMMultiBi|
  00188	e28d3004	 add         r3, sp, #4
  0018c	e0431006	 sub         r1, r3, r6
  00190	e1a02006	 mov         r2, r6
  00194		 |$LL11@OEMMultiBi|
  00194	e3500f41	 cmp         r0, #0x41, 30
  00198	aa00000a	 bge         |$LN56@OEMMultiBi|

; 841  : 		{
; 842  : 			if((pInfo->Region[0].szFileName[i] >= 'A') && (pInfo->Region[0].szFileName[i] <= 'Z')) 

  0019c	e1d230dc	 ldrsb       r3, [r2, #0xC]
  001a0	e3530041	 cmp         r3, #0x41
  001a4	ba000001	 blt         |$LN9@OEMMultiBi|
  001a8	e353005a	 cmp         r3, #0x5A

; 843  : 			{
; 844  : 				szFileName[i] = (pInfo->Region[0].szFileName[i] - 'A' + 'a'); 

  001ac	d2833020	 addle       r3, r3, #0x20
  001b0		 |$LN9@OEMMultiBi|

; 845  : 			}
; 846  : 			else
; 847  : 			{
; 848  : 				szFileName[i] = pInfo->Region[0].szFileName[i];

  001b0	e7c13002	 strb        r3, [r1, +r2]

; 849  : 			}
; 850  : 
; 851  : 			// Keep track of file extension position
; 852  : 			if (szFileName[i] == '.')
; 853  : 			{
; 854  : 				fileExtPos = i;
; 855  : 			}
; 856  : 			i++;

  001b4	e2822001	 add         r2, r2, #1
  001b8	e1d230dc	 ldrsb       r3, [r2, #0xC]
  001bc	e2800001	 add         r0, r0, #1
  001c0	e3530000	 cmp         r3, #0
  001c4	1afffff2	 bne         |$LL11@OEMMultiBi|
  001c8		 |$LN56@OEMMultiBi|

; 857  : 		}
; 858  : 
; 859  : 		// Copy string terminator as well
; 860  : 		szFileName[i] = pInfo->Region[0].szFileName[i];

  001c8	e0863000	 add         r3, r6, r0
  001cc	e1d320dc	 ldrsb       r2, [r3, #0xC]

; 861  : 
; 862  : 		// Check if we support this file
; 863  : 		if (strncmp(szFileName, LOGO_NB0_FILE, LOGO_NB0_FILE_LEN) == 0)

  001d0	e59f109c	 ldr         r1, [pc, #0x9C]
  001d4	e28d3004	 add         r3, sp, #4
  001d8	e7c02003	 strb        r2, [r0, +r3]
  001dc	e3a02008	 mov         r2, #8
  001e0	e28d0004	 add         r0, sp, #4
  001e4	eb000000	 bl          strncmp
  001e8	e3500000	 cmp         r0, #0

; 864  : 		{
; 865  : 			// Remap the start address to the correct NAND location of the logo
; 866  : 			g_eboot.region[0].start = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE;

  001ec	03a03703	 moveq       r3, #3, 14
  001f0	05843010	 streq       r3, [r4, #0x10]

; 867  : 			g_eboot.type = DOWNLOAD_TYPE_LOGO;

  001f4	03a03008	 moveq       r3, #8
  001f8	0a00000a	 beq         |$LN58@OEMMultiBi|
  001fc	e5953440	 ldr         r3, [r5, #0x440]

; 868  : 		}
; 869  : 		else
; 870  : 		{
; 871  : 		    OALMSG(OAL_ERROR, (L"Unsupported downloaded file\r\n"));

  00200	e3130001	 tst         r3, #1
  00204	0a000001	 beq         |$LN51@OEMMultiBi|
  00208	e59f0060	 ldr         r0, [pc, #0x60]
  0020c		 |$LN57@OEMMultiBi|
  0020c	eb000000	 bl          NKDbgPrintfW
  00210		 |$LN51@OEMMultiBi|

; 772  :     UINT32 start, length;
; 773  :     UINT32 ix;
; 774  : 
; 775  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 776  :     OALMSG(OAL_INFO, (L"Download file information:\r\n"));

  00210	e5953440	 ldr         r3, [r5, #0x440]

; 881  :     
; 882  :     rc = TRUE;
; 883  : 
; 884  : cleanUp:
; 885  :     if (!rc) 
; 886  : 	{
; 887  :         OALMSG(OAL_ERROR, (L"Spin for ever...\r\n"));

  00214	e3130001	 tst         r3, #1
  00218	159f004c	 ldrne       r0, [pc, #0x4C]
  0021c	1b000000	 blne        NKDbgPrintfW
  00220		 |$LL2@OEMMultiBi|

; 888  :         for(;;);

  00220	eafffffe	 b           |$LL2@OEMMultiBi|
  00224		 |$LN12@OEMMultiBi|

; 872  : 			goto cleanUp;
; 873  : 		}
; 874  : 		}
; 875  :     else 
; 876  :         {
; 877  :         g_eboot.type = DOWNLOAD_TYPE_RAM;

  00224	e3a03001	 mov         r3, #1
  00228		 |$LN58@OEMMultiBi|
  00228	e5843004	 str         r3, [r4, #4]
  0022c		 |$LN4@OEMMultiBi|
  0022c	e5953440	 ldr         r3, [r5, #0x440]

; 878  :         }
; 879  : 
; 880  :     OALMSG(OAL_INFO, (L"Download file type: %d\r\n", g_eboot.type));

  00230	e3130008	 tst         r3, #8
  00234	15941004	 ldrne       r1, [r4, #4]
  00238	159f0028	 ldrne       r0, [pc, #0x28]
  0023c	1b000000	 blne        NKDbgPrintfW
  00240	e5953440	 ldr         r3, [r5, #0x440]
  00244		 |$cleanUp$47801|

; 889  : 	}
; 890  :     OALMSG(OAL_INFO, (L"-OEMMultiBinNotify\r\n"));

  00244	e3130008	 tst         r3, #8
  00248	159f0014	 ldrne       r0, [pc, #0x14]
  0024c	1b000000	 blne        NKDbgPrintfW
  00250	e59d0108	 ldr         r0, [sp, #0x108]
  00254	eb000000	 bl          __security_check_cookie

; 891  : }

  00258	e28ddf43	 add         sp, sp, #0x43, 30
  0025c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00260	e12fff1e	 bx          lr
  00264		 |$LN63@OEMMultiBi|
  00264		 |$LN64@OEMMultiBi|
  00264	00000000	 DCD         |??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  00268		 |$LN65@OEMMultiBi|
  00268	00000000	 DCD         |??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0026c		 |$LN66@OEMMultiBi|
  0026c	00000000	 DCD         |??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00270		 |$LN67@OEMMultiBi|
  00270	00000000	 DCD         |??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00274		 |$LN68@OEMMultiBi|
  00274	00000000	 DCD         |??_C@_08CMMENMPK@logo?4nb0?$AA@|
  00278		 |$LN69@OEMMultiBi|
  00278	00000000	 DCD         |??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@|
  0027c		 |$LN70@OEMMultiBi|
  0027c	00000000	 DCD         |??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00280		 |$LN71@OEMMultiBi|
  00280	00000000	 DCD         |??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@|
  00284		 |$LN72@OEMMultiBi|
  00284	00000000	 DCD         |g_eboot|
  00288		 |$LN73@OEMMultiBi|
  00288	00000000	 DCD         |??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  0028c		 |$LN74@OEMMultiBi|
  0028c	00000000	 DCD         |dpCurSettings|
  00290		 |$LN75@OEMMultiBi|
  00290	00000000	 DCD         |__security_cookie|
  00294		 |$M48183|

			 ENDP  ; |OEMMultiBinNotify|

	EXPORT	|OEMMapMemAddr|
	EXPORT	|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48213| DCD	|$LN14@OEMMapMemA|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMMapMemAddr| PROC

; 908  : {

  00000		 |$LN14@OEMMapMemA|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48210|
  00004	e1a02001	 mov         r2, r1

; 909  :     UINT8 *pAddress = NULL;
; 910  : 
; 911  :     //OALMSG(OAL_INFO, (L"+OEMMapMemAddr(0x%08x, 0x%08x)\r\n", image, address));
; 912  :     
; 913  :     switch (g_eboot.type) {

  00008	e59f3088	 ldr         r3, [pc, #0x88]
  0000c	e3a04000	 mov         r4, #0
  00010	e5931004	 ldr         r1, [r3, #4]
  00014	e3510001	 cmp         r1, #1
  00018	0a000018	 beq         |$LN4@OEMMapMemA|
  0001c	e3510002	 cmp         r1, #2
  00020	9a000007	 bls         |$LN1@OEMMapMemA|
  00024	e3510004	 cmp         r1, #4
  00028	9a000010	 bls         |$LN5@OEMMapMemA|
  0002c	e3510006	 cmp         r1, #6
  00030	0a00000c	 beq         |$LN3@OEMMapMemA|
  00034	e3510007	 cmp         r1, #7
  00038	0a000008	 beq         |$LN2@OEMMapMemA|
  0003c	e3510008	 cmp         r1, #8
  00040	0a00000a	 beq         |$LN5@OEMMapMemA|
  00044		 |$LN1@OEMMapMemA|

; 935  : 		
; 936  : #ifdef IMGMULTIXIP
; 937  : 	case DOWNLOAD_TYPE_EXT:
; 938  :         pAddress = (UINT8*) (address);
; 939  :         break;
; 940  : #endif
; 941  : 
; 942  :     default:
; 943  :         OALMSG(OAL_ERROR, (L"ERROR: OEMMapMemAddr: " L"Invalid download type %d\r\n", g_eboot.type
; 944  :         ));

  00044	e59f3048	 ldr         r3, [pc, #0x48]
  00048	e5933440	 ldr         r3, [r3, #0x440]
  0004c	e3130001	 tst         r3, #1
  00050	0a00000b	 beq         |$LN11@OEMMapMemA|
  00054	e59f0034	 ldr         r0, [pc, #0x34]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	ea000008	 b           |$LN11@OEMMapMemA|
  00060		 |$LN2@OEMMapMemA|

; 931  : 
; 932  : 	case DOWNLOAD_TYPE_FLASHNOR:
; 933  :         pAddress = (UINT8*) (address - NOR_ROMOFFSET);

  00060	e2424206	 sub         r4, r2, #6, 4

; 934  :         break;

  00064	ea000006	 b           |$LN11@OEMMapMemA|
  00068		 |$LN3@OEMMapMemA|

; 926  :         break;
; 927  : 
; 928  :     case DOWNLOAD_TYPE_FLASHNAND:
; 929  :         pAddress = (UINT8*) (address - NAND_ROMOFFSET);

  00068	e2424101	 sub         r4, r2, #1, 2

; 930  :         break;

  0006c	ea000004	 b           |$LN11@OEMMapMemA|
  00070		 |$LN5@OEMMapMemA|

; 914  : 
; 915  :         
; 916  :     case DOWNLOAD_TYPE_XLDR:
; 917  :     case DOWNLOAD_TYPE_EBOOT:   
; 918  : 	case DOWNLOAD_TYPE_LOGO:
; 919  :         //  Map to scratch RAM prior to flashing
; 920  :         pAddress = (UINT8*)g_eboot.region[0].base + (address - image);

  00070	e5933018	 ldr         r3, [r3, #0x18]
  00074	e0433000	 sub         r3, r3, r0
  00078	e0834002	 add         r4, r3, r2

; 921  :         break;

  0007c	ea000000	 b           |$LN11@OEMMapMemA|
  00080		 |$LN4@OEMMapMemA|

; 922  : 
; 923  :     case DOWNLOAD_TYPE_RAM:            
; 924  :         //  RAM based NK.BIN and EBOOT.BIN files are given in virtual memory addresses
; 925  :         pAddress = (UINT8*)address;

  00080	e1a04002	 mov         r4, r2
  00084		 |$LN11@OEMMapMemA|

; 945  : 
; 946  :     }
; 947  : 
; 948  :     //OALMSGS(OAL_INFO, (L"-OEMMapMemAddr(pAddress = 0x%08x)\r\n", pAddress));
; 949  :     return pAddress;
; 950  : }

  00084	e1a00004	 mov         r0, r4
  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN15@OEMMapMemA|
  00090		 |$LN16@OEMMapMemA|
  00090	00000000	 DCD         |??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@|
  00094		 |$LN17@OEMMapMemA|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$LN18@OEMMapMemA|
  00098	00000000	 DCD         |g_eboot|
  0009c		 |$M48211|

			 ENDP  ; |OEMMapMemAddr|

	EXPORT	|OEMIsFlashAddr|
	EXPORT	|??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48232| DCD	|$LN13@OEMIsFlash|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "s", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "s", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIsFlashAddr| PROC

; 966  : {

  00000		 |$LN13@OEMIsFlash|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48229|
  00004	e1a01000	 mov         r1, r0

; 967  :     BOOL rc;
; 968  : 
; 969  : 	UNREFERENCED_PARAMETER(address);
; 970  : 
; 971  :     OALMSG(OAL_INFO, (L"+OEMIsFlashAddr(0x%08x)\r\n", address));

  00008	e59f406c	 ldr         r4, [pc, #0x6C]
  0000c	e5942440	 ldr         r2, [r4, #0x440]
  00010	e3120008	 tst         r2, #8
  00014	0a000002	 beq         |$LN7@OEMIsFlash|
  00018	e59f0058	 ldr         r0, [pc, #0x58]
  0001c	eb000000	 bl          NKDbgPrintfW
  00020	e5942440	 ldr         r2, [r4, #0x440]
  00024		 |$LN7@OEMIsFlash|

; 972  : 
; 973  :     // Depending on download type
; 974  :     switch (g_eboot.type)

  00024	e59f3048	 ldr         r3, [pc, #0x48]
  00028	e5933004	 ldr         r3, [r3, #4]
  0002c	e3530003	 cmp         r3, #3
  00030	3a000006	 bcc         |$LN1@OEMIsFlash|
  00034	e3530004	 cmp         r3, #4
  00038	9a000002	 bls         |$LN2@OEMIsFlash|
  0003c	e2433006	 sub         r3, r3, #6
  00040	e3530003	 cmp         r3, #3
  00044	8a000001	 bhi         |$LN1@OEMIsFlash|
  00048		 |$LN2@OEMIsFlash|

; 975  :         {
; 976  :         case DOWNLOAD_TYPE_XLDR:
; 977  :         case DOWNLOAD_TYPE_EBOOT:
; 978  :         case DOWNLOAD_TYPE_LOGO:
; 979  :         case DOWNLOAD_TYPE_FLASHNAND:
; 980  :         case DOWNLOAD_TYPE_FLASHNOR:
; 981  :         case DOWNLOAD_TYPE_EXT:
; 982  :             rc = TRUE;

  00048	e3a04001	 mov         r4, #1

; 983  :             break;

  0004c	ea000000	 b           |$LN3@OEMIsFlash|
  00050		 |$LN1@OEMIsFlash|

; 984  :         default:
; 985  :             rc = FALSE;

  00050	e3a04000	 mov         r4, #0
  00054		 |$LN3@OEMIsFlash|

; 986  :             break;
; 987  :         }
; 988  : 
; 989  :     OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));

  00054	e3120008	 tst         r2, #8
  00058	159f0010	 ldrne       r0, [pc, #0x10]
  0005c	11a01004	 movne       r1, r4
  00060	1b000000	 blne        NKDbgPrintfW

; 990  :     return rc;
; 991  : }

  00064	e1a00004	 mov         r0, r4
  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN14@OEMIsFlash|
  00070		 |$LN15@OEMIsFlash|
  00070	00000000	 DCD         |??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00074		 |$LN16@OEMIsFlash|
  00074	00000000	 DCD         |g_eboot|
  00078		 |$LN17@OEMIsFlash|
  00078	00000000	 DCD         |??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0007c		 |$LN18@OEMIsFlash|
  0007c	00000000	 DCD         |dpCurSettings|
  00080		 |$M48230|

			 ENDP  ; |OEMIsFlashAddr|

	EXPORT	|OEMReadData|
	IMPORT	|BLEthReadData|
	IMPORT	|BLSDCardReadData|

  00000			 AREA	 |.pdata|, PDATA
|$T48249| DCD	|$LN9@OEMReadDat|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMReadData| PROC

; 1005 : {

  00000		 |$LN9@OEMReadDat|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48246|
  00004	e1a02000	 mov         r2, r0

; 1006 :     BOOL rc = FALSE;
; 1007 :     switch (g_eboot.bootDeviceType)

  00008	e59f3034	 ldr         r3, [pc, #0x34]
  0000c	e3a00000	 mov         r0, #0
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530002	 cmp         r3, #2
  00018	0a000005	 beq         |$LN1@OEMReadDat|
  0001c	e3530004	 cmp         r3, #4
  00020	1a000005	 bne         |$LN3@OEMReadDat|

; 1008 :         {
; 1009 :         #if BUILDING_EBOOT_SD
; 1010 :         case BOOT_SDCARD_TYPE:
; 1011 :             rc = BLSDCardReadData(size, pData);

  00024	e1a00002	 mov         r0, r2
  00028	eb000000	 bl          BLSDCardReadData

; 1016 :             break;
; 1017 :         }
; 1018 :     return rc;
; 1019 : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN1@OEMReadDat|

; 1012 :             break;
; 1013 :         #endif
; 1014 :         case OAL_KITL_TYPE_ETH:
; 1015 :             rc = BLEthReadData(size, pData);

  00034	e1a00002	 mov         r0, r2
  00038	eb000000	 bl          BLEthReadData
  0003c		 |$LN3@OEMReadDat|

; 1016 :             break;
; 1017 :         }
; 1018 :     return rc;
; 1019 : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@OEMReadDat|
  00044		 |$LN11@OEMReadDat|
  00044	00000000	 DCD         |g_eboot|
  00048		 |$M48247|

			 ENDP  ; |OEMReadData|

	EXPORT	|OEMShowProgress|
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48258| DCD	|$LN5@OEMShowPro@2|
	DCD	0x40000601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMShowProgress| PROC

; 1032 : {

  00000		 |$LN5@OEMShowPro@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48255|

; 1033 :     UNREFERENCED_PARAMETER(packetNumber);
; 1034 :     RETAILMSG(1,(TEXT(".")));

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          NKDbgPrintfW

; 1035 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@OEMShowPro@2|
  00014		 |$LN7@OEMShowPro@2|
  00014	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00018		 |$M48256|

			 ENDP  ; |OEMShowProgress|

	EXPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T48270| DCD	|$LN5@OALGetTick|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 1044 : {

  00000		 |$LN5@OALGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48267|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1045 :     OMAP_GPTIMER_REGS *pGPTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 1046 :     return INREG32(&pGPTimerRegs->TCRR) >> 5;

  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e1a002a3	 mov         r0, r3, lsr #5

; 1047 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M48268|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|OEMKitlGetSecs|

  00000			 AREA	 |.pdata|, PDATA
|$T48284| DCD	|$LN7@OEMKitlGet|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlGetSecs| PROC

; 1058 : {

  00000		 |$LN7@OEMKitlGet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48281|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1059 :     return OALGetTickCount()/1000;

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e59f2010	 ldr         r2, [pc, #0x10]
  0001c	e1a012a3	 mov         r1, r3, lsr #5
  00020	e0823291	 umull       r3, r2, r1, r2
  00024	e1a00322	 mov         r0, r2, lsr #6

; 1060 : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@OEMKitlGet|
  00030		 |$LN9@OEMKitlGet|
  00030	10624dd3	 DCD         0x10624dd3
  00034		 |$M48282|

			 ENDP  ; |OEMKitlGetSecs|

	EXPORT	|GetDisplayResolutionFromBootArgs|

  00000			 AREA	 |.pdata|, PDATA
|$T48294| DCD	|$LN5@GetDisplay|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetDisplayResolutionFromBootArgs| PROC

; 1067 : {

  00000		 |$LN5@GetDisplay|
  00000		 |$M48291|

; 1068 :     *pDispRes=g_bootCfg.displayRes;

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e593306c	 ldr         r3, [r3, #0x6C]
  00008	e5803000	 str         r3, [r0]

; 1069 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@GetDisplay|
  00010		 |$LN7@GetDisplay|
  00010	00000000	 DCD         |g_bootCfg|
  00014		 |$M48292|

			 ENDP  ; |GetDisplayResolutionFromBootArgs|

	EXPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48308| DCD	|$LN9@IsDVIMode|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDVIMode| PROC

; 1073 : {

  00000		 |$LN9@IsDVIMode|
  00000		 |$M48305|

; 1074 :     DWORD dispRes;    
; 1075 :     GetDisplayResolutionFromBootArgs(&dispRes);
; 1076 :     if (dispRes==OMAP_LCD_DEFAULT)

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e593306c	 ldr         r3, [r3, #0x6C]
  00008	e3530000	 cmp         r3, #0

; 1077 :         return FALSE;

  0000c	03a00000	 moveq       r0, #0

; 1078 :     else
; 1079 :         return TRUE;        

  00010	13a00001	 movne       r0, #1

; 1080 : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN10@IsDVIMode|
  00018		 |$LN11@IsDVIMode|
  00018	00000000	 DCD         |g_bootCfg|
  0001c		 |$M48306|

			 ENDP  ; |IsDVIMode|

	EXPORT	|ConvertCAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T48320| DCD	|$LN5@ConvertCAt|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConvertCAtoPA| PROC

; 1084 : {   

  00000		 |$LN5@ConvertCAt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48317|

; 1085 :     return OALVAtoPA(va);

  00004	eb000000	 bl          OALVAtoPA

; 1086 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M48318|

			 ENDP  ; |ConvertCAtoPA|

	EXPORT	|OEMPreDownload|
	EXPORT	|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|BLEthDownload|
	IMPORT	|BLFlashDownload|
	IMPORT	|BLSDCardDownload|
	IMPORT	|OALKitlDeviceType|
	IMPORT	|BLMenu|
	IMPORT	|BLReadBootCfg|
	IMPORT	|BLReserveBootBlocks|
	IMPORT	|g_pOEMMultiBINNotify|
	IMPORT	|wcscpy|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T48375| DCD	|$LN66@OEMPreDown|
	DCD	0x4000e801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| DCB 0xd
	DCB	0x0, 0xa, 0x0, ">", 0x0, ">", 0x0, ">", 0x0, " ", 0x0, "F"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "<", 0x0, "<", 0x0, "<", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| DCB "n", 0x0, "k"
	DCB	0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "W", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, ".", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPreDownload| PROC

; 405  : {

  00000		 |$LN66@OEMPreDown|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M48372|

; 406  :     ULONG rc = (ULONG) BL_ERROR;
; 407  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 408  :     BOOL bForceBootMenu;
; 409  :     OMAP_PRCM_GLOBAL_PRM_REGS * pPrmGlobal = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00004	e59f0390	 ldr         r0, [pc, #0x390]
  00008	e3a01000	 mov         r1, #0
  0000c	e3a0a20a	 mov         r10, #0xA, 4
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a08000	 mov         r8, r0

; 410  :     ULONG dwTemp;
; 411  :     UINT32 *pStatusControlAddr = OALPAtoUA(OMAP_STATUS_CONTROL_REGS_PA);

  00018	e59f0378	 ldr         r0, [pc, #0x378]
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA
  00024	e1a07000	 mov         r7, r0

; 412  :     UINT32 dwSysBootCfg;
; 413  : 
; 414  :     OALLog(L"INFO: Predownload.......\r\n");

  00028	e59f0364	 ldr         r0, [pc, #0x364]
  0002c	eb000000	 bl          NKDbgPrintfW

; 415  : 
; 416  :     // We need to support multi bin notify
; 417  :     g_pOEMMultiBINNotify = OEMMultiBinNotify;

  00030	e59f2358	 ldr         r2, [pc, #0x358]
  00034	e59f3350	 ldr         r3, [pc, #0x350]
  00038	e5823000	 str         r3, [r2]

; 418  : 
; 419  :     // Ensure bootloader blocks are marked as reserved
; 420  :     BLReserveBootBlocks();

  0003c	eb000000	 bl          BLReserveBootBlocks

; 421  : 
; 422  :     // Read saved configration
; 423  :     if (BLReadBootCfg(&g_bootCfg) &&
; 424  :         (g_bootCfg.signature == BOOT_CFG_SIGNATURE) &&
; 425  :         (g_bootCfg.version == BOOT_CFG_VERSION))

  00040	e59f4340	 ldr         r4, [pc, #0x340]
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          BLReadBootCfg
  0004c	e59f6330	 ldr         r6, [pc, #0x330]
  00050	e59f5328	 ldr         r5, [pc, #0x328]
  00054	e3500000	 cmp         r0, #0
  00058	0a000008	 beq         |$LN24@OEMPreDown|
  0005c	e5943000	 ldr         r3, [r4]
  00060	e1530005	 cmp         r3, r5
  00064	1a000005	 bne         |$LN24@OEMPreDown|
  00068	e5943004	 ldr         r3, [r4, #4]
  0006c	e3530002	 cmp         r3, #2
  00070	1a000002	 bne         |$LN24@OEMPreDown|

; 426  : 	{
; 427  :         OALLog(L"INFO: Boot configuration found\r\n");

  00074	e59f0300	 ldr         r0, [pc, #0x300]
  00078	eb000000	 bl          NKDbgPrintfW

; 428  : 	}
; 429  :     else 

  0007c	ea000054	 b           |$LN23@OEMPreDown|
  00080		 |$LN24@OEMPreDown|

; 430  : 	{
; 431  :         OALLog(L"WARN: Boot config wasn't found, using defaults\r\n");

  00080	e59f02f0	 ldr         r0, [pc, #0x2F0]
  00084	eb000000	 bl          NKDbgPrintfW

; 432  :         memset(&g_bootCfg, 0, sizeof(g_bootCfg));

  00088	e3a02080	 mov         r2, #0x80
  0008c	e3a01000	 mov         r1, #0
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          memset

; 433  : 		memcpy(&g_bootCfg.mac,DefaultMacAddress,sizeof(g_bootCfg.mac));

  00098	e2861060	 add         r1, r6, #0x60
  0009c	e2840066	 add         r0, r4, #0x66
  000a0	e3a02006	 mov         r2, #6
  000a4	eb000000	 bl          memcpy

; 434  :         g_bootCfg.signature = BOOT_CFG_SIGNATURE;
; 435  :         g_bootCfg.version = BOOT_CFG_VERSION;
; 436  : 
; 437  :         g_bootCfg.oalFlags = 0;
; 438  :         g_bootCfg.flashNKFlags = 0;
; 439  :         g_bootCfg.ECCtype =  (UCHAR)dwEbootECCtype;

  000a8	e59f32c4	 ldr         r3, [pc, #0x2C4]

; 440  :         // To make it easier to select USB or EBOOT from menus when booting from SD card,
; 441  :         // preset the kitlFlags. This has no effect if booting from SD card.
; 442  :         g_bootCfg.kitlFlags = OAL_KITL_FLAGS_DHCP|OAL_KITL_FLAGS_ENABLED;
; 443  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_VMINI;
; 444  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_EXTNAME;
; 445  : 
; 446  :         g_bootCfg.displayRes = OMAP_LCD_DEFAULT;
; 447  : 
; 448  :         
; 449  :         if(g_CPUFamily == CPU_FAMILY_DM37XX)

  000ac	e3a01002	 mov         r1, #2
  000b0	e59f22b8	 ldr         r2, [pc, #0x2B8]
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e5845000	 str         r5, [r4]
  000bc	e3a00000	 mov         r0, #0
  000c0	e5841004	 str         r1, [r4, #4]
  000c4	e3a01000	 mov         r1, #0
  000c8	e5840034	 str         r0, [r4, #0x34]
  000cc	e5922000	 ldr         r2, [r2]
  000d0	e5841074	 str         r1, [r4, #0x74]
  000d4	e5c43078	 strb        r3, [r4, #0x78]
  000d8	e3a0302d	 mov         r3, #0x2D
  000dc	e5843030	 str         r3, [r4, #0x30]
  000e0	e3a03000	 mov         r3, #0
  000e4	e3520001	 cmp         r2, #1
  000e8	e584306c	 str         r3, [r4, #0x6C]

; 450  :         {
; 451  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_37XX-1;

  000ec	03a03003	 moveq       r3, #3

; 452  :         }
; 453  :         else
; 454  :         {
; 455  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_35XX-1;

  000f0	13a03004	 movne       r3, #4
  000f4	e584307c	 str         r3, [r4, #0x7C]

; 456  :         }
; 457  :         // select default boot device based on boot select switch setting
; 458  :         dwSysBootCfg = INREG32(pStatusControlAddr);

  000f8	e5973000	 ldr         r3, [r7]

; 459  :         OALLog(L"INFO: SW4 boot setting: 0x%02x\r\n", dwSysBootCfg & 0x3f);

  000fc	e59f0268	 ldr         r0, [pc, #0x268]
  00100	e203503f	 and         r5, r3, #0x3F
  00104	e1a01005	 mov         r1, r5
  00108	eb000000	 bl          NKDbgPrintfW

; 460  : 
; 461  :         switch (dwSysBootCfg & 0x3f)

  0010c	e3550024	 cmp         r5, #0x24
  00110	8a000012	 bhi         |$LN27@OEMPreDown|
  00114	0a00001e	 beq         |$LN18@OEMPreDown|
  00118	e355001b	 cmp         r5, #0x1B
  0011c	8a000015	 bhi         |$LN14@OEMPreDown|
  00120	e28f3004	 add         r3, pc, #4
  00124	e7d33005	 ldrb        r3, [r3, +r5]
  00128	e08ff003	 add         pc, pc, r3
  0012c		 |$LN35@OEMPreDown|
  0012c		 |$LN34@OEMPreDown|
  0012c		 |$LN36@OEMPreDown|
  0012c	28ed		 DCB         0x28
  0012d		 |$LN37@OEMPreDown|
  0012d	18ed		 DCB         0x18
  0012e		 |$LN38@OEMPreDown|
  0012e	28ed		 DCB         0x28
  0012f		 |$LN39@OEMPreDown|
  0012f	48ed		 DCB         0x48
  00130		 |$LN40@OEMPreDown|
  00130	28ed		 DCB         0x28
  00131		 |$LN41@OEMPreDown|
  00131	48ed		 DCB         0x48
  00132		 |$LN42@OEMPreDown|
  00132	54ed		 DCB         0x54
  00133		 |$LN43@OEMPreDown|
  00133	48ed		 DCB         0x48
  00134		 |$LN44@OEMPreDown|
  00134	48ed		 DCB         0x48
  00135		 |$LN45@OEMPreDown|
  00135	48ed		 DCB         0x48
  00136		 |$LN46@OEMPreDown|
  00136	48ed		 DCB         0x48
  00137		 |$LN47@OEMPreDown|
  00137	48ed		 DCB         0x48
  00138		 |$LN48@OEMPreDown|
  00138	18ed		 DCB         0x18
  00139		 |$LN49@OEMPreDown|
  00139	48ed		 DCB         0x48
  0013a		 |$LN50@OEMPreDown|
  0013a	48ed		 DCB         0x48
  0013b		 |$LN51@OEMPreDown|
  0013b	48ed		 DCB         0x48
  0013c		 |$LN52@OEMPreDown|
  0013c	28ed		 DCB         0x28
  0013d		 |$LN53@OEMPreDown|
  0013d	48ed		 DCB         0x48
  0013e		 |$LN54@OEMPreDown|
  0013e	54ed		 DCB         0x54
  0013f		 |$LN55@OEMPreDown|
  0013f	48ed		 DCB         0x48
  00140		 |$LN56@OEMPreDown|
  00140	48ed		 DCB         0x48
  00141		 |$LN57@OEMPreDown|
  00141	18ed		 DCB         0x18
  00142		 |$LN58@OEMPreDown|
  00142	28ed		 DCB         0x28
  00143		 |$LN59@OEMPreDown|
  00143	48ed		 DCB         0x48
  00144		 |$LN60@OEMPreDown|
  00144	54ed		 DCB         0x54
  00145		 |$LN61@OEMPreDown|
  00145	48ed		 DCB         0x48
  00146		 |$LN62@OEMPreDown|
  00146	48ed		 DCB         0x48
  00147		 |$LN63@OEMPreDown|
  00147	18ed		 DCB         0x18
  00148		 |$LN16@OEMPreDown|
  00148	e3a03302	 mov         r3, #2, 6
  0014c		 |$LN33@OEMPreDown|

; 469  :             break;
; 470  :     
; 471  :     	case 0x2f: // brian
; 472  :         case 0x06:
; 473  :         case 0x12:
; 474  :         case 0x18:
; 475  :             // 1st boot device is MMC1 (SD Card Boot)
; 476  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_MMCHS1_REGS_PA;
; 477  :             break;          
; 478  : 
; 479  :         case 0x01: 
; 480  :         case 0x0c: 
; 481  :         case 0x15: 
; 482  :         case 0x1b: 
; 483  :             // 1st boot device is NAND
; 484  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;

  0014c	e3833020	 orr         r3, r3, #0x20
  00150	e5843010	 str         r3, [r4, #0x10]
  00154	ea000012	 b           |$LN19@OEMPreDown|
  00158		 |$LN15@OEMPreDown|

; 485  :             break;

  00158	e3a03303	 mov         r3, #3, 6

; 486  :             
; 487  :         case 0x00:
; 488  :         case 0x02:
; 489  :         case 0x04:
; 490  :         case 0x10:
; 491  :         case 0x16:
; 492  :             // 1st boot device is ONENAND
; 493  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_ONENAND_REGS_PA + 0x20;                       
; 494  :             break;

  0015c	eafffffa	 b           |$LN33@OEMPreDown|
  00160		 |$LN27@OEMPreDown|

; 460  : 
; 461  :         switch (dwSysBootCfg & 0x3f)

  00160	e3550026	 cmp         r5, #0x26
  00164	0a00000a	 beq         |$LN18@OEMPreDown|
  00168	e355002f	 cmp         r5, #0x2F
  0016c	0a000004	 beq         |$LN17@OEMPreDown|
  00170	e355003b	 cmp         r5, #0x3B
  00174	0a000006	 beq         |$LN18@OEMPreDown|
  00178		 |$LN14@OEMPreDown|

; 495  : 
; 496  :         default:
; 497  :             // UART,  Ethernet Boot
; 498  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;

  00178	e3a03415	 mov         r3, #0x15, 8
  0017c	e5843010	 str         r3, [r4, #0x10]

; 499  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;
; 500  :             break;

  00180	ea00000a	 b           |$LN31@OEMPreDown|
  00184		 |$LN17@OEMPreDown|
  00184	e3a03312	 mov         r3, #0x12, 6
  00188	e3833927	 orr         r3, r3, #0x27, 18
  0018c	e5843010	 str         r3, [r4, #0x10]
  00190	ea000003	 b           |$LN19@OEMPreDown|
  00194		 |$LN18@OEMPreDown|

; 462  :         {
; 463  :         case 0x24:
; 464  :         case 0x26:
; 465  :         case 0x3b:
; 466  :             // 1st boot device is USB
; 467  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  00194	e3a03312	 mov         r3, #0x12, 6
  00198	e3833aab	 orr         r3, r3, #0xAB, 20
  0019c	e5843010	 str         r3, [r4, #0x10]

; 468  :             g_bootCfg.kitlDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  001a0	e5843024	 str         r3, [r4, #0x24]
  001a4		 |$LN19@OEMPreDown|

; 485  :             break;

  001a4	e5943024	 ldr         r3, [r4, #0x24]

; 501  :         }            
; 502  :         if (g_bootCfg.kitlDevLoc.LogicalLoc == 0)

  001a8	e3530000	 cmp         r3, #0
  001ac	1a000001	 bne         |$LN13@OEMPreDown|
  001b0		 |$LN31@OEMPreDown|

; 503  :         {
; 504  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;

  001b0	e3a03415	 mov         r3, #0x15, 8
  001b4	e5843024	 str         r3, [r4, #0x24]
  001b8		 |$LN13@OEMPreDown|

; 505  :         };
; 506  :         g_bootCfg.deviceID = 0;
; 507  :         g_bootCfg.osPartitionSize = IMAGE_WINCE_CODE_SIZE;
; 508  :         wcscpy(g_bootCfg.filename, L"nk.bin");

  001b8	e3a03000	 mov         r3, #0
  001bc	e59f11a4	 ldr         r1, [pc, #0x1A4]
  001c0	e5843044	 str         r3, [r4, #0x44]
  001c4	e3a0350a	 mov         r3, #0xA, 10
  001c8	e284004c	 add         r0, r4, #0x4C
  001cc	e5843048	 str         r3, [r4, #0x48]
  001d0	eb000000	 bl          wcscpy
  001d4		 |$LN23@OEMPreDown|

; 509  : 	}
; 510  : 
; 511  : 	// Initialize flash partitions if needed
; 512  : 	//brian    BLConfigureFlashPartitions(FALSE);
; 513  : 
; 514  :     // Initialize ARGS structure
; 515  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 516  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 517  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  001d4	e59a3000	 ldr         r3, [r10]
  001d8	e59f5184	 ldr         r5, [pc, #0x184]
  001dc	e1530005	 cmp         r3, r5
  001e0	1a000005	 bne         |$LN11@OEMPreDown|
  001e4	e1da30b4	 ldrh        r3, [r10, #4]
  001e8	e3530001	 cmp         r3, #1
  001ec	1a000002	 bne         |$LN11@OEMPreDown|
  001f0	e1da30b6	 ldrh        r3, [r10, #6]
  001f4	e3530001	 cmp         r3, #1
  001f8	0a000003	 beq         |$LN12@OEMPreDown|
  001fc		 |$LN11@OEMPreDown|

; 518  : 	{
; 519  : 		memset(pArgs, 0, IMAGE_SHARE_ARGS_SIZE);

  001fc	e3a02a01	 mov         r2, #1, 20
  00200	e3a01000	 mov         r1, #0
  00204	e3a0020a	 mov         r0, #0xA, 4
  00208	eb000000	 bl          memset
  0020c		 |$LN12@OEMPreDown|

; 520  : 	}        
; 521  :     
; 522  :     // Save reset type
; 523  :     dwTemp = INREG32(&pPrmGlobal->PRM_RSTST);

  0020c	e5983058	 ldr         r3, [r8, #0x58]

; 524  :     if (dwTemp & (GLOBALWARM_RST /* actually SW reset */ | EXTERNALWARM_RST))

  00210	e3a02000	 mov         r2, #0
  00214	e3a0b001	 mov         r11, #1
  00218	e3130042	 tst         r3, #0x42

; 525  :     {
; 526  :         pArgs->coldBoot = FALSE;
; 527  :     }
; 528  :     else
; 529  :     {
; 530  :         pArgs->coldBoot = TRUE;
; 531  :         OALLog(L"\r\n>>> Forcing cold boot (non-persistent registry and other data will be wiped) <<< \r\n");

  0021c	059f013c	 ldreq       r0, [pc, #0x13C]
  00220	158a200c	 strne       r2, [r10, #0xC]
  00224	058ab00c	 streq       r11, [r10, #0xC]
  00228	0b000000	 bleq        NKDbgPrintfW

; 532  :     }
; 533  :     
; 534  :     // Don't force the boot menu, use default action unless user breaks
; 535  :     // into menu
; 536  :     bForceBootMenu = FALSE;

  0022c	e59f7128	 ldr         r7, [pc, #0x128]
  00230	e59f8120	 ldr         r8, [pc, #0x120]
  00234	e3a00000	 mov         r0, #0
  00238		 |$retryBootMenu$47694|

; 537  :     
; 538  : retryBootMenu:
; 539  : 	// Call configuration menu
; 540  :     BLMenu(bForceBootMenu);

  00238	eb000000	 bl          BLMenu

; 541  :     
; 542  :     // Update ARGS structure if necessary
; 543  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 544  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) || 
; 545  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  0023c	e59a3000	 ldr         r3, [r10]
  00240	e1530005	 cmp         r3, r5
  00244	1a000005	 bne         |$LN7@OEMPreDown|
  00248	e1da30b4	 ldrh        r3, [r10, #4]
  0024c	e3530001	 cmp         r3, #1
  00250	1a000002	 bne         |$LN7@OEMPreDown|
  00254	e1da30b6	 ldrh        r3, [r10, #6]
  00258	e3530001	 cmp         r3, #1
  0025c	0a000023	 beq         |$LN8@OEMPreDown|
  00260		 |$LN7@OEMPreDown|

; 546  :         {
; 547  : 			pArgs->header.signature = OAL_ARGS_SIGNATURE;

  00260	e58a5000	 str         r5, [r10]

; 548  : 			pArgs->header.oalVersion = OAL_ARGS_VERSION;

  00264	e1cab0b4	 strh        r11, [r10, #4]

; 549  : 			pArgs->header.bspVersion = BSP_ARGS_VERSION;

  00268	e1cab0b6	 strh        r11, [r10, #6]

; 550  : 			pArgs->kitl.flags = g_bootCfg.kitlFlags;

  0026c	e5943030	 ldr         r3, [r4, #0x30]

; 551  : 			pArgs->kitl.devLoc = g_bootCfg.kitlDevLoc;

  00270	e284101c	 add         r1, r4, #0x1C
  00274	e28a001c	 add         r0, r10, #0x1C
  00278	e3a02014	 mov         r2, #0x14
  0027c	e58a3018	 str         r3, [r10, #0x18]
  00280	eb000000	 bl          memcpy

; 552  : 			pArgs->kitl.ipAddress = g_bootCfg.ipAddress;

  00284	e5943038	 ldr         r3, [r4, #0x38]
  00288	e3a0920a	 mov         r9, #0xA, 4

; 553  : 			pArgs->kitl.ipMask = g_bootCfg.ipMask;
; 554  : 			pArgs->kitl.ipRoute = g_bootCfg.ipRoute;
; 555  : 			memcpy(pArgs->kitl.mac,g_bootCfg.mac,sizeof(pArgs->kitl.mac)); 

  0028c	e3890030	 orr         r0, r9, #0x30
  00290	e58a3038	 str         r3, [r10, #0x38]
  00294	e594303c	 ldr         r3, [r4, #0x3C]
  00298	e2841066	 add         r1, r4, #0x66
  0029c	e3a02006	 mov         r2, #6
  002a0	e58a303c	 str         r3, [r10, #0x3C]
  002a4	e5943040	 ldr         r3, [r4, #0x40]
  002a8	e58a3040	 str         r3, [r10, #0x40]
  002ac	eb000000	 bl          memcpy

; 556  :  			pArgs->updateMode = FALSE;

  002b0	e3a03000	 mov         r3, #0
  002b4	e58a3008	 str         r3, [r10, #8]

; 557  : 			pArgs->deviceID = g_bootCfg.deviceID;

  002b8	e5943044	 ldr         r3, [r4, #0x44]

; 558  : 			pArgs->oalFlags = g_bootCfg.oalFlags;
; 559  : 			pArgs->dispRes = g_bootCfg.displayRes;
; 560  : 			pArgs->ECCtype = g_bootCfg.ECCtype; 
; 561  : 			pArgs->opp_mode = g_bootCfg.opp_mode;
; 562  : 			memcpy(pArgs->DevicePrefix, gDevice_prefix, sizeof(pArgs->DevicePrefix));

  002bc	e3890048	 orr         r0, r9, #0x48
  002c0	e3a02018	 mov         r2, #0x18
  002c4	e58a3010	 str         r3, [r10, #0x10]
  002c8	e5943034	 ldr         r3, [r4, #0x34]
  002cc	e58a3044	 str         r3, [r10, #0x44]
  002d0	e594306c	 ldr         r3, [r4, #0x6C]
  002d4	e58a3060	 str         r3, [r10, #0x60]
  002d8	e5d43078	 ldrb        r3, [r4, #0x78]
  002dc	e58a3064	 str         r3, [r10, #0x64]
  002e0	e594307c	 ldr         r3, [r4, #0x7C]
  002e4	e58a3068	 str         r3, [r10, #0x68]
  002e8	e5981000	 ldr         r1, [r8]
  002ec	eb000000	 bl          memcpy
  002f0		 |$LN8@OEMPreDown|

; 563  :         }  
; 564  :     
; 565  :     // Initialize display
; 566  : 		//BLShowLogo();					//Ray 13-07-31
; 567  : 		//BLShowLogo(TRUE);
; 568  : 		//BLShowLogo(FALSE);
; 569  : 		//BBLShowLogo(bForceBootMenu);	
; 570  : 
; 571  :     // Image download depends on protocol
; 572  :     g_eboot.bootDeviceType = OALKitlDeviceType(&g_bootCfg.bootDevLoc, g_bootDevices);

  002f0	e1a01006	 mov         r1, r6
  002f4	e2840008	 add         r0, r4, #8
  002f8	eb000000	 bl          OALKitlDeviceType
  002fc	e5870000	 str         r0, [r7]

; 573  : 
; 574  : 	switch (g_eboot.bootDeviceType)

  00300	e3500002	 cmp         r0, #2
  00304	0a00000a	 beq         |$LN2@OEMPreDown|
  00308	e3500003	 cmp         r0, #3
  0030c	0a000004	 beq         |$LN3@OEMPreDown|
  00310	e3500004	 cmp         r0, #4
  00314	1a00000b	 bne         |$LN29@OEMPreDown|

; 575  : 	{
; 576  : 		case BOOT_SDCARD_TYPE:
; 577  :             rc = BLSDCardDownload(g_bootCfg.filename); // \PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY

  00318	e284004c	 add         r0, r4, #0x4C
  0031c	eb000000	 bl          BLSDCardDownload

; 578  :             break;

  00320	ea000006	 b           |$LN5@OEMPreDown|
  00324		 |$LN3@OEMPreDown|

; 579  :         case OAL_KITL_TYPE_FLASH:
; 580  :             rc = BLFlashDownload(&g_bootCfg, g_bootDevices);

  00324	e1a01006	 mov         r1, r6
  00328	e1a00004	 mov         r0, r4
  0032c	eb000000	 bl          BLFlashDownload

; 581  :             break;

  00330	ea000002	 b           |$LN5@OEMPreDown|
  00334		 |$LN2@OEMPreDown|

; 582  :         case OAL_KITL_TYPE_ETH:
; 583  :             rc = BLEthDownload(&g_bootCfg, g_bootDevices);

  00334	e1a01006	 mov         r1, r6
  00338	e1a00004	 mov         r0, r4
  0033c	eb000000	 bl          BLEthDownload
  00340		 |$LN5@OEMPreDown|

; 584  :             break;
; 585  : 	}
; 586  :         
; 587  : 	if (rc == BL_ERROR)

  00340	e3700001	 cmn         r0, #1
  00344	1a000001	 bne         |$LN1@OEMPreDown|
  00348		 |$LN29@OEMPreDown|

; 588  :     {
; 589  :         // No automatic mode now, force the boot menu to appear
; 590  :         bForceBootMenu = TRUE;

  00348	e3a00001	 mov         r0, #1

; 591  :         goto retryBootMenu; 

  0034c	eaffffb9	 b           |$retryBootMenu$47694|
  00350		 |$LN1@OEMPreDown|

; 592  :     }   
; 593  :     
; 594  :     return rc;
; 595  : }

  00350	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00354	e12fff1e	 bx          lr
  00358		 |$LN67@OEMPreDown|
  00358		 |$LN68@OEMPreDown|
  00358	00000000	 DCD         |gDevice_prefix|
  0035c		 |$LN69@OEMPreDown|
  0035c	00000000	 DCD         |g_eboot|
  00360		 |$LN70@OEMPreDown|
  00360	00000000	 DCD         |??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@|
  00364		 |$LN71@OEMPreDown|
  00364	53475241	 DCD         0x53475241
  00368		 |$LN72@OEMPreDown|
  00368	00000000	 DCD         |??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@|
  0036c		 |$LN73@OEMPreDown|
  0036c	00000000	 DCD         |??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@|
  00370		 |$LN74@OEMPreDown|
  00370	00000000	 DCD         |g_CPUFamily|
  00374		 |$LN75@OEMPreDown|
  00374	00000000	 DCD         |dwEbootECCtype|
  00378		 |$LN76@OEMPreDown|
  00378	00000000	 DCD         |??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@|
  0037c		 |$LN77@OEMPreDown|
  0037c	00000000	 DCD         |??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@|
  00380		 |$LN78@OEMPreDown|
  00380	42434647	 DCD         0x42434647
  00384		 |$LN79@OEMPreDown|
  00384	00000000	 DCD         |g_bootDevices|
  00388		 |$LN80@OEMPreDown|
  00388	00000000	 DCD         |g_bootCfg|
  0038c		 |$LN81@OEMPreDown|
  0038c	00000000	 DCD         |OEMMultiBinNotify|
  00390		 |$LN82@OEMPreDown|
  00390	00000000	 DCD         |g_pOEMMultiBINNotify|
  00394		 |$LN83@OEMPreDown|
  00394	00000000	 DCD         |??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00398		 |$LN84@OEMPreDown|
  00398	480022f0	 DCD         0x480022f0
  0039c		 |$LN85@OEMPreDown|
  0039c	48307200	 DCD         0x48307200
  003a0		 |$M48373|

			 ENDP  ; |OEMPreDownload|

	EXPORT	|OEMLaunch|
	EXPORT	|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	IMPORT	|JumpTo|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|BLEthConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T48447| DCD	|$LN76@OEMLaunch|
	DCD	0x40006f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| DCB "L"
	DCB	0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "i"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, " ", 0x0, "j", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "X"
	DCB	0x0, "L", 0x0, "D", 0x0, "R", 0x0, "/", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "/", 0x0, "I", 0x0, "P"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d"
	DCB	0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMLaunch| PROC

; 611  : {

  00000		 |$LN76@OEMLaunch|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M48444|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08000	 mov         r8, r0

; 612  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 613  : 
; 614  : 	UNREFERENCED_PARAMETER(size);
; 615  : 	UNREFERENCED_PARAMETER(pRomHeader);
; 616  : 
; 617  :     OALMSG(OAL_INFO, (L"+OEMLaunch(0x%08x, 0x%08x, 0x%08x, 0x%08x - %d/%d)\r\n", start, size,
; 618  :         launch, pRomHeader, g_eboot.bootDeviceType, g_eboot.type));

  00014	e59f519c	 ldr         r5, [pc, #0x19C]
  00018	e59f6194	 ldr         r6, [pc, #0x194]
  0001c	e595e440	 ldr         lr, [r5, #0x440]
  00020	e31e0008	 tst         lr, #8
  00024	0a000009	 beq         |$LN33@OEMLaunch|
  00028	e5964004	 ldr         r4, [r6, #4]
  0002c	e596e000	 ldr         lr, [r6]
  00030	e59f0178	 ldr         r0, [pc, #0x178]
  00034	e1a02001	 mov         r2, r1
  00038	e1a03007	 mov         r3, r7
  0003c	e1a01008	 mov         r1, r8
  00040	e58d4008	 str         r4, [sp, #8]
  00044	e58de004	 str         lr, [sp, #4]
  00048	e58d9000	 str         r9, [sp]
  0004c	eb000000	 bl          NKDbgPrintfW
  00050		 |$LN33@OEMLaunch|

; 619  : 
; 620  :     // Depending on protocol there can be some action required
; 621  :     switch (g_eboot.bootDeviceType)

  00050	e5963000	 ldr         r3, [r6]
  00054	e3530002	 cmp         r3, #2
  00058	0a000016	 beq         |$LN19@OEMLaunch|
  0005c	e3530004	 cmp         r3, #4

; 717  :                     break;
; 718  :                 }
; 719  :             break;
; 720  : 
; 721  :         default:        
; 722  :             launch = g_eboot.launchAddress;
; 723  :             break;

  00060	1a000028	 bne         |$LN15@OEMLaunch|
  00064	e5963004	 ldr         r3, [r6, #4]
  00068	e3530001	 cmp         r3, #1
  0006c	0a000031	 beq         |$LN14@OEMLaunch|

; 622  :         {
; 623  : #if BUILDING_EBOOT_SD
; 624  :         case BOOT_SDCARD_TYPE:            
; 625  :             switch (g_eboot.type)

  00070	e3530006	 cmp         r3, #6
  00074	0a000004	 beq         |$LN24@OEMLaunch|
  00078	e5953440	 ldr         r3, [r5, #0x440]

; 652  :                         }
; 653  :                     launch = g_eboot.launchAddress;
; 654  :                     break;
; 655  : 					
; 656  : #if 0
; 657  : /*
; 658  :                 case DOWNLOAD_TYPE_EBOOT:
; 659  :                 case DOWNLOAD_TYPE_XLDR:
; 660  :                     OALMSG(OAL_INFO, (L"INFO: "
; 661  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 662  :                         ));
; 663  :                     while (TRUE);
; 664  :                     break;
; 665  : */
; 666  : #endif
; 667  :                 default:
; 668  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  0007c	e3130001	 tst         r3, #1
  00080	159f0110	 ldrne       r0, [pc, #0x110]
  00084	1b000000	 blne        NKDbgPrintfW
  00088		 |$LL21@OEMLaunch|

; 669  :                     for(;;);

  00088	eafffffe	 b           |$LL21@OEMLaunch|
  0008c		 |$LN24@OEMLaunch|

; 626  :                 {
; 627  : #if 0
; 628  : /*
; 629  :                 case DOWNLOAD_TYPE_FLASHRAM:
; 630  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 631  :                         {
; 632  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 633  :                             L"Image load from flash memory failed\r\n"
; 634  :                             ));
; 635  :                         goto cleanUp;
; 636  :                         }
; 637  :                     launch = g_eboot.launchAddress;
; 638  :                     break;
; 639  : */
; 640  : #endif
; 641  :                 case DOWNLOAD_TYPE_RAM:
; 642  :                     launch = (UINT32)OEMMapMemAddr(start, launch);
; 643  :                     break;
; 644  : 					
; 645  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 646  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)

  0008c	e59f1118	 ldr         r1, [pc, #0x118]
  00090	e59f0110	 ldr         r0, [pc, #0x110]
  00094	eb000000	 bl          BLFlashDownload
  00098	e3500001	 cmp         r0, #1
  0009c	0a000019	 beq         |$LN15@OEMLaunch|

; 647  :                         {
; 648  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 649  :                             L"Image load from flash memory failed\r\n"
; 650  :                             ));

  000a0	e5953440	 ldr         r3, [r5, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	0a000035	 beq         |$cleanUp$47734|
  000ac	e59f00f0	 ldr         r0, [pc, #0xF0]
  000b0	eb000000	 bl          NKDbgPrintfW

; 651  :                         goto cleanUp;

  000b4	ea000032	 b           |$cleanUp$47734|
  000b8		 |$LN19@OEMLaunch|

; 670  :                     break;
; 671  :                 }
; 672  :             break;
; 673  : 
; 674  : #endif
; 675  : 
; 676  :         case OAL_KITL_TYPE_ETH:
; 677  :             BLEthConfig(pArgs);

  000b8	e3a0020a	 mov         r0, #0xA, 4
  000bc	eb000000	 bl          BLEthConfig

; 678  :             switch (g_eboot.type)

  000c0	e5963004	 ldr         r3, [r6, #4]
  000c4	e3530001	 cmp         r3, #1
  000c8	0a00001a	 beq         |$LN14@OEMLaunch|
  000cc	e3530002	 cmp         r3, #2
  000d0	9a000013	 bls         |$LN7@OEMLaunch|
  000d4	e3530004	 cmp         r3, #4
  000d8	9a00000c	 bls         |$LN13@OEMLaunch|
  000dc	e3530005	 cmp         r3, #5
  000e0	9a00000f	 bls         |$LN7@OEMLaunch|
  000e4	e3530007	 cmp         r3, #7
  000e8	9affffe7	 bls         |$LN24@OEMLaunch|
  000ec	e3530008	 cmp         r3, #8
  000f0	1a00000b	 bne         |$LN7@OEMLaunch|

; 705  :                     break;
; 706  : 
; 707  : 				case DOWNLOAD_TYPE_LOGO:
; 708  :                     OALMSG(OAL_INFO, (L"INFO: "
; 709  :                         L"Splashcreen logo downloaded, spin forever\r\n"
; 710  :                         ));

  000f4	e5953440	 ldr         r3, [r5, #0x440]
  000f8	e3130008	 tst         r3, #8
  000fc	159f009c	 ldrne       r0, [pc, #0x9C]
  00100	1b000000	 blne        NKDbgPrintfW
  00104		 |$LL9@OEMLaunch|

; 711  :                     for(;;);

  00104	eafffffe	 b           |$LL9@OEMLaunch|
  00108		 |$LN15@OEMLaunch|

; 679  :                 {
; 680  : #ifdef IMGMULTIXIP
; 681  :                 case DOWNLOAD_TYPE_EXT:
; 682  : #endif					
; 683  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 684  : 				case DOWNLOAD_TYPE_FLASHNOR:
; 685  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 686  :                         {
; 687  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 688  :                             L"Image load from flash memory failed\r\n"
; 689  :                             ));
; 690  :                         goto cleanUp;
; 691  :                         }
; 692  :                     launch = g_eboot.launchAddress;

  00108	e596400c	 ldr         r4, [r6, #0xC]

; 693  :                     break;

  0010c	ea00000d	 b           |$LN17@OEMLaunch|
  00110		 |$LN13@OEMLaunch|

; 697  :                     break;
; 698  : 
; 699  :                 case DOWNLOAD_TYPE_EBOOT:
; 700  :                 case DOWNLOAD_TYPE_XLDR:
; 701  :                     OALMSG(OAL_INFO, (L"INFO: "
; 702  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 703  :                         ));

  00110	e5953440	 ldr         r3, [r5, #0x440]
  00114	e3130008	 tst         r3, #8
  00118	159f007c	 ldrne       r0, [pc, #0x7C]
  0011c	1b000000	 blne        NKDbgPrintfW
  00120		 |$LL12@OEMLaunch|

; 704  :                     for(;;);

  00120	eafffffe	 b           |$LL12@OEMLaunch|
  00124		 |$LN7@OEMLaunch|

; 712  :                     break;
; 713  : 
; 714  :                 default:
; 715  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  00124	e5953440	 ldr         r3, [r5, #0x440]
  00128	e3130001	 tst         r3, #1
  0012c	159f0064	 ldrne       r0, [pc, #0x64]
  00130	1b000000	 blne        NKDbgPrintfW
  00134		 |$LL6@OEMLaunch|

; 716  :                     for(;;);

  00134	eafffffe	 b           |$LL6@OEMLaunch|
  00138		 |$LN14@OEMLaunch|

; 694  : 
; 695  :                 case DOWNLOAD_TYPE_RAM:
; 696  :                     launch = (UINT32)OEMMapMemAddr(start, launch);

  00138	e1a01007	 mov         r1, r7
  0013c	e1a00008	 mov         r0, r8
  00140	eb000000	 bl          OEMMapMemAddr
  00144	e1a04000	 mov         r4, r0
  00148		 |$LN17@OEMLaunch|

; 724  :         }
; 725  : 
; 726  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 727  :     if ((g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) &&       
; 728  :         /* if loading from NAND then do not need to flash NAND again */      
; 729  :         (g_eboot.bootDeviceType != OAL_KITL_TYPE_FLASH) && 
; 730  : 	    (start != (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET)) &&
; 731  : 	    (start != (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))) {
; 732  :             if( !WriteFlashNK(start, size))
; 733  : 	            OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 734  : 	                L"Flash NK.bin failed, start=%x\r\n", start
; 735  : 	                ));
; 736  :     	}
; 737  : #endif
; 738  : 
; 739  :     // Check if we get launch address
; 740  :     if (launch == (UINT32)INVALID_HANDLE_VALUE)

  00148	e3740001	 cmn         r4, #1
  0014c	1a000004	 bne         |$LN1@OEMLaunch|
  00150	e5953440	 ldr         r3, [r5, #0x440]

; 741  :         {
; 742  :         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 743  :             L"Unknown image launch address, spin forever\r\n"
; 744  :             ));

  00154	e3130001	 tst         r3, #1
  00158	159f0034	 ldrne       r0, [pc, #0x34]
  0015c	1b000000	 blne        NKDbgPrintfW
  00160		 |$LL2@OEMLaunch|

; 745  :         for(;;);

  00160	eafffffe	 b           |$LL2@OEMLaunch|
  00164		 |$LN1@OEMLaunch|

; 746  :         }        
; 747  : 
; 748  :     // Print message, flush caches and jump to image
; 749  :     OALLog(
; 750  :         L"Launch Windows CE image by jumping to 0x%08x...\r\n\r\n", launch
; 751  :         );

  00164	e59f0024	 ldr         r0, [pc, #0x24]
  00168	e1a01004	 mov         r1, r4
  0016c	eb000000	 bl          NKDbgPrintfW

; 752  : 
; 753  : 	OEMDeinitDebugSerial();

  00170	eb000000	 bl          OEMDeinitDebugSerial

; 754  :     OEMPlatformDeinit();

  00174	eb000000	 bl          OEMPlatformDeinit

; 755  :     JumpTo(OALVAtoPA((UCHAR*)launch));

  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          OALVAtoPA
  00180	eb000000	 bl          JumpTo
  00184		 |$cleanUp$47734|

; 756  : 
; 757  : cleanUp:
; 758  :     return;
; 759  : }

  00184	e28dd00c	 add         sp, sp, #0xC
  00188	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$LN77@OEMLaunch|
  00190		 |$LN78@OEMLaunch|
  00190	00000000	 DCD         |??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@|
  00194		 |$LN79@OEMLaunch|
  00194	00000000	 DCD         |??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@|
  00198		 |$LN80@OEMLaunch|
  00198	00000000	 DCD         |??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@|
  0019c		 |$LN81@OEMLaunch|
  0019c	00000000	 DCD         |??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@|
  001a0		 |$LN82@OEMLaunch|
  001a0	00000000	 DCD         |??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@|
  001a4		 |$LN83@OEMLaunch|
  001a4	00000000	 DCD         |??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@|
  001a8		 |$LN84@OEMLaunch|
  001a8	00000000	 DCD         |g_bootCfg|
  001ac		 |$LN85@OEMLaunch|
  001ac	00000000	 DCD         |g_kitlDevices|
  001b0		 |$LN86@OEMLaunch|
  001b0	00000000	 DCD         |??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  001b4		 |$LN87@OEMLaunch|
  001b4	00000000	 DCD         |g_eboot|
  001b8		 |$LN88@OEMLaunch|
  001b8	00000000	 DCD         |dpCurSettings|
  001bc		 |$M48445|

			 ENDP  ; |OEMLaunch|

	END
